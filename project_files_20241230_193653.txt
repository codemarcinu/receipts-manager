=== Project Files Collection (20241230_193653) ===


================================================================================
File: src/config.py
================================================================================
import os
from pathlib import Path


class Config:
    # Podstawowa konfiguracja
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-key-change-in-production'

    # Konfiguracja bazy danych
    BASE_DIR = Path(__file__).resolve().parent.parent
    DATABASE_PATH = BASE_DIR / 'data' / 'zakupy.db'
    SQLALCHEMY_DATABASE_URI = f'sqlite:///{DATABASE_PATH}'
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Konfiguracja uploadów
    UPLOAD_FOLDER = BASE_DIR / 'data' / 'uploads'
    RECEIPTS_FOLDER = BASE_DIR / 'data' / 'receipts'
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max-limit

    # Konfiguracja logowania
    LOG_FILE = BASE_DIR / 'logs' / 'smart_zapasy.log'
    LOG_LEVEL = 'INFO'

    # Google Cloud Vision API
    GOOGLE_CLOUD_CREDENTIALS = BASE_DIR / 'config' / 'credentials' / 'google-cloud-vision.json'

    def __init__(self):
        # Upewnij się, że wymagane katalogi istnieją
        self.UPLOAD_FOLDER.mkdir(parents=True, exist_ok=True)
        self.RECEIPTS_FOLDER.mkdir(parents=True, exist_ok=True)
        Path(self.LOG_FILE).parent.mkdir(parents=True, exist_ok=True)

================================================================================
File: .env
================================================================================
FLASK_APP=src.web:create_app
FLASK_ENV=development
FLASK_DEBUG=True
SECRET_KEY=dev-key-change-in-production
DATABASE_URL=sqlite:///data/zakupy.db

================================================================================
File: requirements.txt
================================================================================
Flask==3.0.0
Flask-SQLAlchemy==3.1.1
Flask-Migrate==4.0.5
Flask-WTF==1.2.1
google-cloud-vision==3.5.0
Pillow==10.1.0
python-dotenv==1.0.0
Werkzeug==3.0.1
pytest==8.0.0
tailwindcss==3.4.1

================================================================================
File: setup.py
================================================================================
from setuptools import setup, find_packages

setup(
    name="receipts-manager",
    version="0.1",
    packages=find_packages(),
    install_requires=[
        'flask',
        'flask-sqlalchemy',
        'flask-migrate',
        'flask-wtf',
        'python-dotenv',
        'Pillow',
        'google-cloud-vision'
    ],
)

================================================================================
File: package.json
================================================================================
{
  "name": "receipts-manager",
  "version": "1.0.0",
  "description": "System zarządzania paragonami",
  "scripts": {
    "build": "tailwindcss -i ./src/web/static/css/style.css -o ./src/web/static/css/main.css --minify",
    "watch": "tailwindcss -i ./src/web/static/css/style.css -o ./src/web/static/css/main.css --watch",
    "dev": "npm run watch",
    "clean": "rm -f ./src/web/static/css/main.css",
    "build:prod": "npm run clean && npm run build"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0"
  },
  "dependencies": {
    "@material/web": "^1.0.0"
  }
}

================================================================================
File: tailwind.config.js
================================================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/web/templates/**/*.html",
    "./src/web/static/js/**/*.js",
  ],
  theme: {
    extend: {
      colors: {
        // Rozszerzone kolory primary
        'primary': {
          50: '#F3E5F5',
          100: '#E1BEE7',
          200: '#CE93D8',
          300: '#BA68C8',
          400: '#AB47BC',
          500: '#9C27B0', // Bazowy kolor primary
          600: '#8E24AA',
          700: '#7B1FA2',
          800: '#6A1B9A',
          900: '#4A148C',
          // Nowe odcienie
          'light': '#B868C8',
          'dark': '#6A1B9A',
          'accent': '#F3E5F5',
        },
        
        // Rozszerzone kolory secondary
        'secondary': {
          50: '#E8F5E9',
          100: '#C8E6C9',
          200: '#A5D6A7',
          300: '#81C784',
          400: '#66BB6A',
          500: '#4CAF50', // Bazowy kolor secondary
          600: '#43A047',
          700: '#388E3C',
          800: '#2E7D32',
          900: '#1B5E20',
          // Nowe odcienie
          'light': '#81C784',
          'dark': '#2E7D32',
          'accent': '#E8F5E9',
        },
        
        // Rozszerzone kolory błędów, ostrzeżeń itp.
        'error': {
          50: '#FFEBEE',
          100: '#FFCDD2',
          200: '#EF9A9A',
          300: '#E57373',
          400: '#EF5350',
          500: '#F44336', // Bazowy kolor błędu
          600: '#E53935',
          700: '#D32F2F',
          800: '#C62828',
          900: '#B71C1C',
        },
        
        'warning': {
          50: '#FFF3E0',
          100: '#FFE0B2',
          200: '#FFCD85',
          300: '#FFB74D',
          400: '#FFA726',
          500: '#FF9800', // Bazowy kolor ostrzeżenia
          600: '#FB8C00',
          700: '#F57C00',
          800: '#EF6C00',
          900: '#E65100',
        },
        
        'success': {
          50: '#E8F5E9',
          100: '#C8E6C9',
          200: '#A5D6A7',
          300: '#81C784',
          400: '#66BB6A',
          500: '#4CAF50', // Bazowy kolor sukcesu
          600: '#43A047',
          700: '#388E3C',
          800: '#2E7D32',
          900: '#1B5E20',
        },
        
        // Neutralne kolory
        'neutral': {
          50: '#FAFAFA',
          100: '#F5F5F5',
          200: '#EEEEEE',
          300: '#E0E0E0',
          400: '#BDBDBD',
          500: '#9E9E9E',
          600: '#757575',
          700: '#616161',
          800: '#424242',
          900: '#212121',
        },
        
        'background': '#FFFFFF',
        'surface': '#FFFFFF',
      },
      
      // Pozostałe rozszerzenia jak poprzednio...
      borderRadius: {
        'material-sm': '4px',
        'material-md': '8px',
        'material-lg': '16px',
      },
      boxShadow: {
        'material-1': '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)',
        'material-2': '0 3px 6px rgba(0,0,0,0.15), 0 2px 4px rgba(0,0,0,0.12)',
        'material-3': '0 10px 20px rgba(0,0,0,0.15), 0 3px 6px rgba(0,0,0,0.10)',
        'material-4': '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)',
        'material-5': '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22)',
      },
      spacing: {
        'material-1': '4px',
        'material-2': '8px',
        'material-3': '16px',
        'material-4': '24px',
        'material-5': '32px',
        'material-6': '40px',
      },
    },
  },
  plugins: [],
}

================================================================================
File: postcss.config.js
================================================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
}

================================================================================
File: src/web/__init__.py
================================================================================
from flask import Flask
from src.database import db, migrate
from src.config import Config
import logging


def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)

    # Inicjalizacja rozszerzeń
    db.init_app(app)
    migrate.init_app(app, db)

    # Konfiguracja logowania
    logging.basicConfig(
        filename=app.config.get('LOG_FILE', 'app.log'),
        level=app.config.get('LOG_LEVEL', logging.INFO),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # Rejestracja blueprintów
    from .views import bp as receipts_bp
    from .error_handlers import errors as errors_bp

    app.register_blueprint(receipts_bp)
    app.register_blueprint(errors_bp)

    return app

================================================================================
File: src/database/__init__.py
================================================================================
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

# Inicjalizacja obiektów SQLAlchemy i Migrate
db = SQLAlchemy()
migrate = Migrate()


def init_app(app):
    """Initialize database and migrations."""
    db.init_app(app)
    migrate.init_app(app, db)

    # Import models to ensure they are registered with SQLAlchemy
    from . import models  # noqa

    # Create tables if they don't exist (development only)
    if app.config['FLASK_ENV'] == 'development':
        with app.app_context():
            db.create_all()

    return db

================================================================================
File: src/database/models.py
================================================================================
from datetime import datetime
from sqlalchemy.sql import func
from src.database import db


class BaseModel(db.Model):
    """Base model class for common columns and methods."""
    __abstract__ = True

    id = db.Column(db.Integer, primary_key=True)
    created_at = db.Column(db.DateTime, default=func.now(), nullable=False)
    updated_at = db.Column(db.DateTime, default=func.now(), onupdate=func.now(), nullable=False)

    def save(self):
        """Save the model instance to database."""
        try:
            db.session.add(self)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            raise e

    def delete(self):
        """Delete the model instance from database."""
        try:
            db.session.delete(self)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            raise e


class Category(BaseModel):
    """Model representing product categories."""
    __tablename__ = 'categories'

    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.Text, nullable=True)

    # Relationships
    products = db.relationship('Product', back_populates='category', lazy='dynamic')

    def __repr__(self):
        return f"<Category {self.name}>"


class Receipt(BaseModel):
    """Model representing shopping receipts."""
    __tablename__ = 'receipts'

    purchase_date = db.Column(db.Date, nullable=False)
    store_name = db.Column(db.String(200), nullable=False)
    total_amount = db.Column(db.Numeric(10, 2), nullable=False)
    status = db.Column(db.String(20), nullable=False, default='new')  # new, processing, verified
    ocr_text = db.Column(db.Text, nullable=True)  # Raw OCR text

    # Relationships
    products = db.relationship(
        'Product',
        back_populates='receipt',
        lazy='dynamic',
        cascade='all, delete-orphan'  # Dodane kaskadowe usuwanie
    )

    def __repr__(self):
        return f"<Receipt {self.store_name} {self.purchase_date}>"


class Product(BaseModel):
    """Model representing products from receipts."""
    __tablename__ = 'products'

    name = db.Column(db.String(200), nullable=False)
    unit_price = db.Column(db.Numeric(10, 2), nullable=False)
    quantity = db.Column(db.Numeric(10, 3), nullable=False)  # Allow for fractional quantities
    unit = db.Column(db.String(20), nullable=True)  # kg, szt, l, etc.
    expiry_date = db.Column(db.Date, nullable=True)
    status = db.Column(db.String(20), nullable=False, default='active')  # active, consumed

    # Foreign keys
    receipt_id = db.Column(db.Integer, db.ForeignKey('receipts.id'), nullable=False)
    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'), nullable=True)

    # Relationships
    receipt = db.relationship('Receipt', back_populates='products')
    category = db.relationship('Category', back_populates='products')

    def __repr__(self):
        return f"<Product {self.name} {self.quantity}{self.unit}>"

================================================================================
File: src/web/views.py
================================================================================
from flask import (
    Blueprint,
    render_template,
    request,
    flash,
    redirect,
    url_for,
    current_app,
    jsonify
)
from src.database.models import Receipt, Product, Category
from src.database import db
from .forms import ReceiptUploadForm, ReceiptVerificationForm
import logging
from sqlalchemy import func
from datetime import datetime
from werkzeug.utils import secure_filename
import os

# Konfiguracja loggera
logger = logging.getLogger(__name__)

# Tworzenie blueprintów
bp = Blueprint('receipts', __name__, url_prefix='/receipts')
errors = Blueprint('errors', __name__)

# Obsługa błędów
@errors.app_errorhandler(404)
def not_found_error(error):
    return render_template('errors/404.html'), 404

@errors.app_errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('errors/500.html'), 500

@errors.app_errorhandler(403)
def forbidden_error(error):
    return render_template('errors/403.html'), 403

# Widoki główne
@bp.route('/')
def index():
    """Strona główna aplikacji."""
    return render_template('index.html')

@bp.route('/list')
def receipt_list():
    """Lista wszystkich paragonów."""
    receipts = Receipt.query.order_by(Receipt.purchase_date.desc()).all()
    return render_template('receipt_list.html', receipts=receipts)

@bp.route('/upload', methods=['GET', 'POST'])
def upload():
    """Widok do uploadowania nowego paragonu."""
    form = ReceiptUploadForm()
    if form.validate_on_submit():
        try:
            # Zapisywanie pliku
            file = form.receipt_image.data
            filename = secure_filename(file.filename)
            filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            # Tworzenie nowego paragonu
            receipt = Receipt(
                store_name=form.store_name.data,
                purchase_date=datetime.now().date(),
                total_amount=0,
                status='new'
            )
            receipt.save()

            flash('Paragon został pomyślnie dodany.', 'success')
            return redirect(url_for('receipts.verify_receipt', receipt_id=receipt.id))
        except Exception as e:
            logger.error(f"Błąd podczas uploadu paragonu: {str(e)}")
            flash('Wystąpił błąd podczas uploadu paragonu.', 'error')

    return render_template('upload.html', form=form)

@bp.route('/verify/<int:receipt_id>', methods=['GET', 'POST'])
def verify_receipt(receipt_id):
    """Widok do weryfikacji danych z paragonu."""
    receipt = Receipt.query.get_or_404(receipt_id)
    categories = Category.query.order_by(Category.name).all()

    if request.method == 'GET':
        form_data = {
            'receipt_id': receipt.id,
            'store_name': receipt.store_name,
            'purchase_date': receipt.purchase_date,
            'total_amount': receipt.total_amount,
            'products': [{
                'id': product.id,
                'name': product.name,
                'unit_price': product.unit_price,
                'quantity': product.quantity,
                'unit': product.unit,
                'category_id': product.category_id or 0,
                'expiry_date': product.expiry_date
            } for product in receipt.products]
        }
        form = ReceiptVerificationForm(data=form_data, categories=categories)
    else:
        form = ReceiptVerificationForm(categories=categories)
        if form.validate_on_submit():
            try:
                receipt.store_name = form.store_name.data
                receipt.purchase_date = form.purchase_date.data
                receipt.total_amount = form.total_amount.data
                receipt.status = 'verified'

                existing_product_ids = {p.id for p in receipt.products}
                form_product_ids = {
                    int(p['id'].data) for p in form.products
                    if p['id'].data
                }

                # Usuwanie produktów, których nie ma w formularzu
                for product in receipt.products:
                    if product.id not in form_product_ids:
                        db.session.delete(product)

                # Aktualizacja/dodawanie produktów
                for product_form in form.products:
                    product_id = product_form['id'].data
                    if product_id:
                        product = Product.query.get(product_id)
                        if product:
                            product.name = product_form['name'].data
                            product.unit_price = product_form['unit_price'].data
                            product.quantity = product_form['quantity'].data
                            product.unit = product_form['unit'].data
                            product.category_id = product_form['category_id'].data or None
                            product.expiry_date = product_form['expiry_date'].data
                    else:
                        product = Product(
                            receipt_id=receipt.id,
                            name=product_form['name'].data,
                            unit_price=product_form['unit_price'].data,
                            quantity=product_form['quantity'].data,
                            unit=product_form['unit'].data,
                            category_id=product_form['category_id'].data or None,
                            expiry_date=product_form['expiry_date'].data
                        )
                        db.session.add(product)

                db.session.commit()
                flash('Paragon został pomyślnie zweryfikowany.', 'success')
                return redirect(url_for('receipts.receipt_list'))

            except Exception as e:
                logger.error(f"Błąd podczas zapisywania danych: {str(e)}")
                db.session.rollback()
                flash('Wystąpił błąd podczas zapisywania danych.', 'error')

    return render_template('verify.html', form=form, receipt=receipt)

@bp.route('/api/products/suggestions', methods=['GET'])
def get_product_suggestions():
    """Endpoint API zwracający sugestie nazw produktów."""
    query = request.args.get('query', '').lower()
    if len(query) < 2:
        return jsonify([])

    # Pobierz unikalne nazwy produktów pasujące do zapytania
    suggestions = Product.query\
        .with_entities(Product.name, Product.unit, Product.category_id)\
        .filter(func.lower(Product.name).contains(query))\
        .group_by(Product.name, Product.unit, Product.category_id)\
        .order_by(func.count(Product.id).desc())\
        .limit(10)\
        .all()

    # Przygotuj dane do odpowiedzi
    results = [{
        'name': suggestion.name,
        'unit': suggestion.unit,
        'category_id': suggestion.category_id
    } for suggestion in suggestions]

    return jsonify(results)

@bp.route('/<int:receipt_id>', methods=['DELETE'])
def delete_receipt(receipt_id):
    """Endpoint do usuwania paragonu."""
    try:
        receipt = Receipt.query.get_or_404(receipt_id)
        
        # Zabezpieczenie przed przypadkowym usunięciem zweryfikowanego paragonu
        if receipt.status == 'verified':
            return jsonify({
                'success': False,
                'message': 'Nie można usunąć zweryfikowanego paragonu.'
            }), 403
            
        # Usuwanie powiązanego pliku
        if receipt.image_filename:
            try:
                file_path = os.path.join(current_app.config['UPLOAD_FOLDER'], receipt.image_filename)
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.warning(f"Nie udało się usunąć pliku paragonu: {str(e)}")

        receipt.delete()
        
        return jsonify({
            'success': True, 
            'message': 'Paragon został pomyślnie usunięty.'
        })
    except Exception as e:
        logger.error(f"Błąd podczas usuwania paragonu: {str(e)}")
        db.session.rollback()
        return jsonify({
            'success': False,
            'message': 'Wystąpił błąd podczas usuwania paragonu.'
        }), 500

================================================================================
File: src/web/forms.py
================================================================================
from flask_wtf import FlaskForm
from flask_wtf.file import FileField, FileRequired, FileAllowed
from wtforms import StringField, DecimalField, DateField, SelectField, FormField, FieldList, HiddenField
from wtforms.validators import DataRequired, Length, Optional, NumberRange
from datetime import date

class ProductForm(FlaskForm):
    """Formularz dla pojedynczego produktu z paragonu."""
    id = HiddenField('ID')
    name = StringField(
        'Nazwa produktu',
        validators=[
            DataRequired(message='Nazwa produktu jest wymagana'),
            Length(min=2, max=200, message='Nazwa produktu musi mieć od 2 do 200 znaków')
        ]
    )
    unit_price = DecimalField(
        'Cena jednostkowa',
        validators=[
            DataRequired(message='Cena jest wymagana'),
            NumberRange(min=0, message='Cena musi być większa od 0')
        ],
        places=2
    )
    quantity = DecimalField(
        'Ilość',
        validators=[
            DataRequired(message='Ilość jest wymagana'),
            NumberRange(min=0, message='Ilość musi być większa od 0')
        ],
        places=3
    )
    unit = StringField(
        'Jednostka',
        validators=[Optional(), Length(max=20)]
    )
    category_id = SelectField(
        'Kategoria',
        validators=[Optional()],
        coerce=int,
        choices=[]
    )
    expiry_date = DateField(
        'Data ważności',
        validators=[Optional()]
    )

    class Meta:
        csrf = False

class ReceiptVerificationForm(FlaskForm):
    """Formularz do weryfikacji danych z paragonu."""
    receipt_id = HiddenField('ID Paragonu')
    store_name = StringField(
        'Nazwa sklepu',
        validators=[
            DataRequired(message='Nazwa sklepu jest wymagana'),
            Length(min=2, max=200, message='Nazwa sklepu musi mieć od 2 do 200 znaków')
        ]
    )
    purchase_date = DateField(
        'Data zakupu',
        validators=[DataRequired(message='Data zakupu jest wymagana')]
    )
    total_amount = DecimalField(
        'Suma',
        validators=[
            DataRequired(message='Suma jest wymagana'),
            NumberRange(min=0, message='Suma musi być większa od 0')
        ],
        places=2
    )
    products = FieldList(FormField(ProductForm), min_entries=1)

    def __init__(self, *args, categories=None, **kwargs):
        super().__init__(*args, **kwargs)
        if categories:
            choices = [(0, '-- Wybierz kategorię --')] + [(c.id, c.name) for c in categories]
            for product_form in self.products:
                product_form.category_id.choices = choices

class ReceiptUploadForm(FlaskForm):
    """Formularz do uploadu nowego paragonu."""
    store_name = StringField(
        'Nazwa sklepu',
        validators=[
            DataRequired(message='Nazwa sklepu jest wymagana'),
            Length(min=2, max=200, message='Nazwa sklepu musi mieć od 2 do 200 znaków')
        ]
    )
    
    purchase_date = DateField(
        'Data zakupu',
        validators=[DataRequired(message='Data zakupu jest wymagana')],
        default=date.today
    )
    
    receipt_image = FileField(
        'Zdjęcie paragonu',
        validators=[
            FileRequired(message='Plik jest wymagany'),
            FileAllowed(['jpg', 'jpeg', 'png'], message='Dozwolone są tylko pliki obrazów (jpg, jpeg, png)')
        ]
    )

================================================================================
File: src/web/error_handlers.py
================================================================================
from flask import Blueprint, render_template
from src.database import db

errors = Blueprint('errors', __name__)

@errors.app_errorhandler(404)
def not_found_error(error):
    return render_template('errors/404.html'), 404

@errors.app_errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('errors/500.html'), 500

@errors.app_errorhandler(403)
def forbidden_error(error):
    return render_template('errors/403.html'), 403

================================================================================
File: src/web/static/js/ReceiptVerificationForm.js
================================================================================
/**
 * ReceiptVerificationForm.js
 * Obsługa formularza weryfikacji paragonów
 */

class ReceiptVerificationForm {
    constructor() {
        this.form = document.getElementById('verifyForm');
        if (!this.form) {
            console.warn('Element #verifyForm nie został znaleziony w DOM.');
            return;
        }
        this.productsContainer = document.getElementById('products-container');
        this.totalInput = document.getElementById('total_amount');

        this.initializeEventListeners();
        this.initializeExistingProducts();
    }

    initializeEventListeners() {
        let debounceTimeout;
        this.form.addEventListener('input', (e) => {
            if (e.target.classList.contains('price-input') ||
                e.target.classList.contains('quantity-input')) {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(() => this.updateTotalAmount(), 300);
            }
        });

        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    initializeExistingProducts() {
        document.querySelectorAll('.product-name').forEach(input => {
            this.initializeAutocomplete(input);
        });

        this.updateTotalAmount();
    }

    async initializeAutocomplete(input) {
        let timeout = null;
        
        input.addEventListener('input', async (e) => {
            clearTimeout(timeout);
            const query = e.target.value;
            
            if (query.length < 2) return;
            
            timeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/receipts/api/products/suggestions?query=${encodeURIComponent(query)}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const suggestions = await response.json();
                    if (suggestions.length > 0) {
                        const productItem = input.closest('.product-item');
                        this.fillProductDetails(productItem, suggestions[0]);
                    }
                } catch (error) {
                    console.error('Błąd podczas pobierania sugestii:', error);
                    this.showNotification('error', 'Nie udało się pobrać sugestii produktów');
                }
            }, 300);
        });
    }

    fillProductDetails(productItem, suggestion) {
        const unitInput = productItem.querySelector('[name$="unit"]');
        const categorySelect = productItem.querySelector('[name$="category_id"]');
        
        if (unitInput) unitInput.value = suggestion.unit || '';
        if (categorySelect) categorySelect.value = suggestion.category_id || '0';
    }

    addProduct() {
        const template = document.getElementById('product-template');
        const productsCount = document.querySelectorAll('.product-item').length;
        
        const newProduct = template.content.cloneNode(true);
        
        const fields = newProduct.querySelectorAll('input, select');
        fields.forEach(field => {
            const name = field.getAttribute('name');
            if (name) {
                field.setAttribute('name', name.replace(/\d+/, productsCount.toString()));
            }
        });
        
        this.productsContainer.appendChild(newProduct);
        
        const nameInput = this.productsContainer.lastElementChild.querySelector('.product-name');
        if (nameInput) {
            this.initializeAutocomplete(nameInput);
        }
        
        this.updateTotalAmount();
    }

    removeProduct(button) {
        const productItem = button.closest('.product-item');
        
        productItem.style.opacity = '0';
        setTimeout(() => {
            productItem.remove();
            this.updateTotalAmount();
        }, 300);
    }

    updateTotalAmount() {
        const products = document.querySelectorAll('.product-item');
        let total = 0;
        
        products.forEach(product => {
            const price = parseFloat(product.querySelector('.price-input')?.value) || 0;
            const quantity = parseFloat(product.querySelector('.quantity-input')?.value) || 0;
            total += price * quantity;
        });
        
        if (this.totalInput) {
            this.totalInput.value = total.toFixed(2);
        }
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        try {
            const response = await fetch(this.form.action, {
                method: 'POST',
                body: new FormData(this.form)
            });

            const data = await response.json();
            
            if (response.ok) {
                this.showNotification('success', 'Paragon został pomyślnie zapisany');
                setTimeout(() => {
                    window.location.href = '/receipts/list';
                }, 1500);
            } else {
                this.showNotification('error', data.message || 'Wystąpił błąd podczas zapisywania paragonu');
            }
        } catch (error) {
            console.error('Błąd podczas zapisywania:', error);
            this.showNotification('error', 'Wystąpił błąd podczas zapisywania paragonu');
        }
    }

    showNotification(type, message) {
        const container = document.getElementById('notification-container');
        const notification = document.createElement('div');
        notification.className = `md-alert md-alert-${type} animate-bounce-in`;
        notification.textContent = message;

        container.appendChild(notification);

        setTimeout(() => {
            notification.classList.add('animate-fade-out');
            notification.addEventListener('animationend', () => notification.remove(), { once: true });
        }, 5000);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const formElement = document.getElementById('verifyForm');
    if (!formElement) {
        console.warn('Element #verifyForm nie istnieje. Sprawdź HTML i upewnij się, że formularz został załadowany.');
        return;
    }
    window.receiptForm = new ReceiptVerificationForm();
});

window.addProduct = () => window.receiptForm?.addProduct();
window.removeProduct = (button) => window.receiptForm?.removeProduct(button);


================================================================================
File: src/web/static/js/ReceiptVerificationForm.jsx
================================================================================
import React, { useState } from 'react';

const ReceiptVerificationForm = ({ initialData }) => {
    const [formData, setFormData] = useState({
        store: initialData.store || '',
        date: initialData.date || new Date().toISOString().split('T')[0],
        products: initialData.products.map(product => ({
            ...product,
            expiry_date: '',  // nowe pole
            notes: '',        // nowe pole
            current_quantity: product.quantity // początkowo taka sama jak quantity
        })) || [],
        total: initialData.total || 0
    });

    const handleProductChange = (index, field, value) => {
        const newProducts = [...formData.products];
        newProducts[index] = {
            ...newProducts[index],
            [field]: value
        };
        setFormData({
            ...formData,
            products: newProducts
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                window.location.href = '/receipts';
            } else {
                const error = await response.json();
                alert(`Błąd: ${error.message}`);
            }
        } catch (error) {
            alert('Wystąpił błąd podczas zapisywania danych');
        }
    };

    return (
        <div className="container mx-auto p-4">
            <form onSubmit={handleSubmit} className="space-y-6">
                <div className="bg-white shadow rounded-lg p-6">
                    <h2 className="text-xl font-bold mb-4">Weryfikacja paragonu</h2>

                    {/* Dane podstawowe */}
                    <div className="grid grid-cols-2 gap-4 mb-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Sklep</label>
                            <input
                                type="text"
                                value={formData.store}
                                onChange={(e) => setFormData({...formData, store: e.target.value})}
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                required
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Data</label>
                            <input
                                type="date"
                                value={formData.date}
                                onChange={(e) => setFormData({...formData, date: e.target.value})}
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                required
                            />
                        </div>
                    </div>

                    {/* Lista produktów */}
                    <div className="space-y-4">
                        <h3 className="text-lg font-medium">Produkty</h3>
                        {formData.products.map((product, index) => (
                            <div key={index} className="bg-gray-50 p-4 rounded-lg">
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Nazwa</label>
                                        <input
                                            type="text"
                                            value={product.name}
                                            onChange={(e) => handleProductChange(index, 'name', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Ilość</label>
                                        <input
                                            type="number"
                                            step="0.001"
                                            value={product.quantity}
                                            onChange={(e) => handleProductChange(index, 'quantity', parseFloat(e.target.value))}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Jednostka</label>
                                        <select
                                            value={product.unit}
                                            onChange={(e) => handleProductChange(index, 'unit', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        >
                                            <option value="szt">szt</option>
                                            <option value="kg">kg</option>
                                            <option value="g">g</option>
                                            <option value="l">l</option>
                                            <option value="ml">ml</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Cena</label>
                                        <input
                                            type="number"
                                            step="0.01"
                                            value={product.price}
                                            onChange={(e) => handleProductChange(index, 'price', parseFloat(e.target.value))}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Data ważności</label>
                                        <input
                                            type="date"
                                            value={product.expiry_date}
                                            onChange={(e) => handleProductChange(index, 'expiry_date', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                        />
                                    </div>
                                    <div className="col-span-2">
                                        <label className="block text-sm font-medium text-gray-700">Notatki</label>
                                        <textarea
                                            value={product.notes}
                                            onChange={(e) => handleProductChange(index, 'notes', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            rows="2"
                                        />
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Suma */}
                    <div className="mt-6">
                        <label className="block text-sm font-medium text-gray-700">Suma</label>
                        <input
                            type="number"
                            step="0.01"
                            value={formData.total}
                            onChange={(e) => setFormData({...formData, total: parseFloat(e.target.value)})}
                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                            required
                        />
                    </div>

                    {/* Przyciski */}
                    <div className="mt-6 flex justify-end space-x-3">
                        <button
                            type="button"
                            onClick={() => window.location.href = '/receipts'}
                            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                        >
                            Anuluj
                        </button>
                        <button
                            type="submit"
                            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                        >
                            Zapisz
                        </button>
                    </div>
                </div>
            </form>
        </div>
    );
};

export default ReceiptVerificationForm;

================================================================================
File: src/web/static/css/style.css
================================================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: Roboto, system-ui, sans-serif;
    scroll-behavior: smooth;
  }

  body {
    @apply bg-gray-50 text-gray-900 antialiased;
  }
}

@layer components {
  /* Rozszerzone komponenty Card */
  .md-card {
    @apply bg-white rounded-material-md shadow-material-1 p-4 transition-all duration-300 
           hover:shadow-material-2 transform hover:-translate-y-1 
           focus-within:ring-2 focus-within:ring-primary-500;
  }

  .md-card-hover {
    @apply relative overflow-hidden;
  }

  .md-card-hover::before {
    content: '';
    @apply absolute inset-0 bg-primary-500 opacity-0 transition-opacity duration-300;
  }

  .md-card-hover:hover::before {
    @apply opacity-10;
  }

  /* Rozbudowane komponenty Button */
  .md-button {
    @apply inline-flex items-center justify-center px-4 py-2 rounded-material-sm
           font-medium text-white bg-primary-500 hover:bg-primary-600 
           active:bg-primary-700 disabled:bg-gray-300 disabled:cursor-not-allowed
           transition-all duration-200 ease-in-out focus:outline-none 
           focus:ring-2 focus:ring-primary-500 focus:ring-offset-2
           transform active:scale-95 hover:shadow-material-1;
  }

  .md-button-icon {
    @apply p-2 rounded-full hover:bg-gray-100 transition-colors duration-200;
  }

  /* Zaawansowane komponenty Form */
  .md-input-wrapper {
    @apply relative;
  }

  .md-input-icon {
    @apply absolute left-3 top-1/2 -translate-y-1/2 text-gray-400;
  }

  .md-input-with-icon {
    @apply pl-10;
  }

  /* Komponenty Loading */
  .md-spinner {
    @apply inline-block w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin;
  }

  /* Komponenty Transition */
  .md-fade-enter {
    @apply opacity-0;
  }

  .md-fade-enter-active {
    @apply transition-opacity duration-300 ease-out;
  }

  .md-fade-enter-to {
    @apply opacity-100;
  }

  /* Komponenty Progress */
  .md-progress-bar {
    @apply w-full h-1 bg-gray-200 overflow-hidden;
  }

  .md-progress-bar-fill {
    @apply h-full bg-primary-500 transition-all duration-300 ease-in-out;
  }

  /* Komponenty Tooltip */
  .md-tooltip {
    @apply absolute z-50 px-3 py-1 text-sm text-white bg-gray-800 rounded-material-sm 
           opacity-0 invisible transition-all duration-200 ease-in-out
           group-hover:opacity-100 group-hover:visible;
  }

  /* Awaryjne stany komponentów */
  .md-disabled {
    @apply opacity-50 cursor-not-allowed pointer-events-none;
  }

  /* Komponenty Audio/Video */
  .md-media-control {
    @apply bg-primary-500 text-white rounded-full p-2 hover:bg-primary-600 
           transition-colors duration-200;
  }
}

@layer utilities {
  /* Utility dla animacji */
  .animate-bounce-in {
    animation: bounce-in 0.5s ease-in-out;
  }

  .animate-slide-in-right {
    animation: slide-in-right 0.5s ease-out;
  }

  /* Utility dla elevation */
  .elevation-hover {
    @apply transition-shadow duration-300 hover:shadow-material-3;
  }

  /* Utility dla responsywności */
  .max-w-screen-content {
    max-width: 1440px;
  }
}

@keyframes bounce-in {
  0% { transform: scale(0.5); opacity: 0; }
  80% { transform: scale(1.1); opacity: 0.8; }
  100% { transform: scale(1); opacity: 1; }
}

@keyframes slide-in-right {
  0% { 
    transform: translateX(100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

/* Dodatkowe accessibility i dark mode */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
  /* Komponenty powiadomień */
.md-alert {
  @apply p-4 rounded-lg shadow-material-1 bg-white flex items-start space-x-3;
  max-width: 24rem;
}

.md-alert-success {
  @apply bg-green-100 text-green-800;
}

.md-alert-error {
  @apply bg-error-100 text-error-800;
}

.md-alert-warning {
  @apply bg-warning-100 text-warning-800;
}

.md-alert-info {
  @apply bg-primary-100 text-primary-800;
}

/* Animacje dla powiadomień */
@keyframes fade-out {
  from { opacity: 1; transform: translateY(0); }
  to { opacity: 0; transform: translateY(-10px); }
}

.animate-fade-out {
  animation: fade-out 0.5s ease-in-out forwards;
}
}

================================================================================
File: src/web/static/css/main.css
================================================================================
*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/*! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com*/*,:after,:before{box-sizing:border-box;border:0 solid #e5e7eb}:after,:before{--tw-content:""}:host,html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#9ca3af}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]:where(:not([hidden=until-found])){display:none}html{font-family:Roboto,system-ui,sans-serif;scroll-behavior:smooth}body{--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity,1));--tw-text-opacity:1;color:rgb(17 24 39/var(--tw-text-opacity,1));-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.container{width:100%}@media (min-width:640px){.container{max-width:640px}}@media (min-width:768px){.container{max-width:768px}}@media (min-width:1024px){.container{max-width:1024px}}@media (min-width:1280px){.container{max-width:1280px}}@media (min-width:1536px){.container{max-width:1536px}}.md-card{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));border-radius:8px;--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1));padding:1rem;--tw-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);--tw-shadow-colored:0 1px 3px var(--tw-shadow-color),0 1px 2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow);transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.3s}.md-card:focus-within{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000);--tw-ring-opacity:1;--tw-ring-color:rgb(156 39 176/var(--tw-ring-opacity,1))}.md-card:hover{--tw-translate-y:-0.25rem;--tw-shadow:0 3px 6px rgba(0,0,0,.15),0 2px 4px rgba(0,0,0,.12);--tw-shadow-colored:0 3px 6px var(--tw-shadow-color),0 2px 4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.md-button,.md-card:hover{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.md-button{display:inline-flex;align-items:center;justify-content:center;border-radius:4px;--tw-bg-opacity:1;background-color:rgb(156 39 176/var(--tw-bg-opacity,1));padding:.5rem 1rem;font-weight:500;--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity,1));transition-property:all;transition-duration:.2s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.md-button:hover{--tw-bg-opacity:1;background-color:rgb(142 36 170/var(--tw-bg-opacity,1));--tw-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);--tw-shadow-colored:0 1px 3px var(--tw-shadow-color),0 1px 2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.md-button:focus{outline:2px solid transparent;outline-offset:2px;--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000);--tw-ring-opacity:1;--tw-ring-color:rgb(156 39 176/var(--tw-ring-opacity,1));--tw-ring-offset-width:2px}.md-button:active{--tw-scale-x:.95;--tw-scale-y:.95;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));--tw-bg-opacity:1;background-color:rgb(123 31 162/var(--tw-bg-opacity,1))}.md-button:disabled{cursor:not-allowed;--tw-bg-opacity:1;background-color:rgb(209 213 219/var(--tw-bg-opacity,1))}.md-button-icon{border-radius:9999px;padding:.5rem;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.2s}.md-button-icon:hover{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity,1))}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}.static{position:static}.fixed{position:fixed}.inset-0{inset:0}.left-2{left:.5rem}.right-6{right:1.5rem}.top-2{top:.5rem}.top-20{top:5rem}.z-50{z-index:50}.col-span-full{grid-column:1/-1}.mx-auto{margin-left:auto;margin-right:auto}.my-4{margin-top:1rem;margin-bottom:1rem}.mb-0{margin-bottom:0}.mb-1{margin-bottom:.25rem}.mb-10{margin-bottom:2.5rem}.mb-2{margin-bottom:.5rem}.mb-3{margin-bottom:.75rem}.mb-4{margin-bottom:1rem}.mb-6{margin-bottom:1.5rem}.mb-8{margin-bottom:2rem}.ml-auto{margin-left:auto}.mt-1{margin-top:.25rem}.mt-2{margin-top:.5rem}.mt-3{margin-top:.75rem}.mt-4{margin-top:1rem}.mt-8{margin-top:2rem}.mt-auto{margin-top:auto}.block{display:block}.flex{display:flex}.inline-flex{display:inline-flex}.table{display:table}.grid{display:grid}.hidden{display:none}.h-4{height:1rem}.h-5{height:1.25rem}.h-6{height:1.5rem}.h-auto{height:auto}.min-h-screen{min-height:100vh}.w-4{width:1rem}.w-5{width:1.25rem}.w-6{width:1.5rem}.w-full{width:100%}.max-w-2xl{max-width:42rem}.max-w-4xl{max-width:56rem}.max-w-full{max-width:100%}.max-w-md{max-width:28rem}.max-w-screen-xl{max-width:1280px}.flex-grow{flex-grow:1}.-translate-y-full{--tw-translate-y:-100%}.-translate-y-full,.transform{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.cursor-pointer{cursor:pointer}.grid-cols-1{grid-template-columns:repeat(1,minmax(0,1fr))}.flex-col{flex-direction:column}.items-start{align-items:flex-start}.items-center{align-items:center}.justify-end{justify-content:flex-end}.justify-center{justify-content:center}.justify-between{justify-content:space-between}.gap-4{gap:1rem}.gap-6{gap:1.5rem}.space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(.5rem*var(--tw-space-x-reverse));margin-left:calc(.5rem*(1 - var(--tw-space-x-reverse)))}.space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(1rem*var(--tw-space-x-reverse));margin-left:calc(1rem*(1 - var(--tw-space-x-reverse)))}.space-y-1>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(.25rem*(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.25rem*var(--tw-space-y-reverse))}.space-y-2>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(.5rem*(1 - var(--tw-space-y-reverse)));margin-bottom:calc(.5rem*var(--tw-space-y-reverse))}.space-y-4>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(1rem*(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1rem*var(--tw-space-y-reverse))}.space-y-6>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-top:calc(1.5rem*(1 - var(--tw-space-y-reverse)));margin-bottom:calc(1.5rem*var(--tw-space-y-reverse))}.scroll-smooth{scroll-behavior:smooth}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:.5rem}.rounded-material-md{border-radius:8px}.border{border-width:1px}.bg-black{--tw-bg-opacity:1;background-color:rgb(0 0 0/var(--tw-bg-opacity,1))}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246/var(--tw-bg-opacity,1))}.bg-gray-50{--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity,1))}.bg-green-100{--tw-bg-opacity:1;background-color:rgb(220 252 231/var(--tw-bg-opacity,1))}.bg-primary-500{--tw-bg-opacity:1;background-color:rgb(156 39 176/var(--tw-bg-opacity,1))}.bg-red-500{--tw-bg-opacity:1;background-color:rgb(239 68 68/var(--tw-bg-opacity,1))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1))}.bg-yellow-100{--tw-bg-opacity:1;background-color:rgb(254 249 195/var(--tw-bg-opacity,1))}.bg-opacity-50{--tw-bg-opacity:0.5}.p-3{padding:.75rem}.p-4{padding:1rem}.p-6{padding:1.5rem}.px-2{padding-left:.5rem;padding-right:.5rem}.px-3{padding-left:.75rem;padding-right:.75rem}.px-4{padding-left:1rem;padding-right:1rem}.py-1{padding-top:.25rem;padding-bottom:.25rem}.py-12{padding-top:3rem;padding-bottom:3rem}.py-2{padding-top:.5rem;padding-bottom:.5rem}.py-4{padding-top:1rem;padding-bottom:1rem}.py-6{padding-top:1.5rem;padding-bottom:1.5rem}.py-8{padding-top:2rem;padding-bottom:2rem}.pb-3{padding-bottom:.75rem}.pt-2{padding-top:.5rem}.text-center{text-align:center}.text-end{text-align:end}.text-2xl{font-size:1.5rem;line-height:2rem}.text-9xl{font-size:8rem;line-height:1}.text-lg{font-size:1.125rem;line-height:1.75rem}.text-sm{font-size:.875rem;line-height:1.25rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.font-bold{font-weight:700}.font-medium{font-weight:500}.font-semibold{font-weight:600}.text-blue-500{--tw-text-opacity:1;color:rgb(59 130 246/var(--tw-text-opacity,1))}.text-error-500{--tw-text-opacity:1;color:rgb(244 67 54/var(--tw-text-opacity,1))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128/var(--tw-text-opacity,1))}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99/var(--tw-text-opacity,1))}.text-gray-700{--tw-text-opacity:1;color:rgb(55 65 81/var(--tw-text-opacity,1))}.text-gray-800{--tw-text-opacity:1;color:rgb(31 41 55/var(--tw-text-opacity,1))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39/var(--tw-text-opacity,1))}.text-green-500{--tw-text-opacity:1;color:rgb(34 197 94/var(--tw-text-opacity,1))}.text-green-800{--tw-text-opacity:1;color:rgb(22 101 52/var(--tw-text-opacity,1))}.text-primary-500{--tw-text-opacity:1;color:rgb(156 39 176/var(--tw-text-opacity,1))}.text-red-500{--tw-text-opacity:1;color:rgb(239 68 68/var(--tw-text-opacity,1))}.text-red-600{--tw-text-opacity:1;color:rgb(220 38 38/var(--tw-text-opacity,1))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255/var(--tw-text-opacity,1))}.text-yellow-500{--tw-text-opacity:1;color:rgb(234 179 8/var(--tw-text-opacity,1))}.text-yellow-800{--tw-text-opacity:1;color:rgb(133 77 14/var(--tw-text-opacity,1))}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.shadow-material-1{--tw-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);--tw-shadow-colored:0 1px 3px var(--tw-shadow-color),0 1px 2px var(--tw-shadow-color)}.shadow-material-1,.shadow-material-2{box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.shadow-material-2{--tw-shadow:0 3px 6px rgba(0,0,0,.15),0 2px 4px rgba(0,0,0,.12);--tw-shadow-colored:0 3px 6px var(--tw-shadow-color),0 2px 4px var(--tw-shadow-color)}.shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.filter{filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.transition-colors{transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-shadow{transition-property:box-shadow;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.transition-transform{transition-property:transform;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-duration:.15s}.duration-300{transition-duration:.3s}.animate-bounce-in{animation:bounce-in .5s ease-in-out}@keyframes bounce-in{0%{transform:scale(.5);opacity:0}80%{transform:scale(1.1);opacity:.8}to{transform:scale(1);opacity:1}}@keyframes slide-in-right{0%{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}@media (prefers-reduced-motion:reduce){*{animation-duration:.01ms!important;animation-iteration-count:1!important;transition-duration:.01ms!important}.md-alert{display:flex;align-items:flex-start}.md-alert>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-right:calc(.75rem*var(--tw-space-x-reverse));margin-left:calc(.75rem*(1 - var(--tw-space-x-reverse)))}.md-alert{border-radius:.5rem;--tw-bg-opacity:1;background-color:rgb(255 255 255/var(--tw-bg-opacity,1));padding:1rem;--tw-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);--tw-shadow-colored:0 1px 3px var(--tw-shadow-color),0 1px 2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow);max-width:24rem}.md-alert-success{background-color:rgb(220 252 231/var(--tw-bg-opacity,1));color:rgb(22 101 52/var(--tw-text-opacity,1))}.md-alert-error,.md-alert-success{--tw-bg-opacity:1;--tw-text-opacity:1}.md-alert-error{background-color:rgb(255 205 210/var(--tw-bg-opacity,1));color:rgb(198 40 40/var(--tw-text-opacity,1))}.md-alert-warning{background-color:rgb(255 224 178/var(--tw-bg-opacity,1));color:rgb(239 108 0/var(--tw-text-opacity,1))}.md-alert-info,.md-alert-warning{--tw-bg-opacity:1;--tw-text-opacity:1}.md-alert-info{background-color:rgb(225 190 231/var(--tw-bg-opacity,1));color:rgb(106 27 154/var(--tw-text-opacity,1))}@keyframes fade-out{0%{opacity:1;transform:translateY(0)}to{opacity:0;transform:translateY(-10px)}}.animate-fade-out{animation:fade-out .5s ease-in-out forwards}}.hover\:bg-gray-50:hover{--tw-bg-opacity:1;background-color:rgb(249 250 251/var(--tw-bg-opacity,1))}.hover\:bg-primary-50:hover{--tw-bg-opacity:1;background-color:rgb(243 229 245/var(--tw-bg-opacity,1))}.hover\:bg-primary-600:hover{--tw-bg-opacity:1;background-color:rgb(142 36 170/var(--tw-bg-opacity,1))}.hover\:bg-red-50:hover{--tw-bg-opacity:1;background-color:rgb(254 242 242/var(--tw-bg-opacity,1))}.hover\:bg-red-600:hover{--tw-bg-opacity:1;background-color:rgb(220 38 38/var(--tw-bg-opacity,1))}.hover\:text-primary-600:hover{--tw-text-opacity:1;color:rgb(142 36 170/var(--tw-text-opacity,1))}.hover\:text-red-700:hover{--tw-text-opacity:1;color:rgb(185 28 28/var(--tw-text-opacity,1))}.hover\:shadow-material-2:hover{--tw-shadow:0 3px 6px rgba(0,0,0,.15),0 2px 4px rgba(0,0,0,.12);--tw-shadow-colored:0 3px 6px var(--tw-shadow-color),0 2px 4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)}.focus\:translate-y-0:focus{--tw-translate-y:0px;transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}@media (min-width:768px){.md\:flex{display:flex}.md\:hidden{display:none}.md\:grid-cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}}@media (min-width:1024px){.lg\:grid-cols-3{grid-template-columns:repeat(3,minmax(0,1fr))}.lg\:px-6{padding-left:1.5rem;padding-right:1.5rem}}

================================================================================
File: src/web/templates/base.html
================================================================================
<!DOCTYPE html>
<html lang="pl" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}System Zarządzania Paragonami{% endblock %}</title>

    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="icon" type="image/png" href="{{ url_for('static', filename='img/favicon.png') }}">
    <link href="{{ url_for('static', filename='css/main.css') }}" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">

    {% block extra_css %}{% endblock %}

    <link rel="preload" href="{{ url_for('static', filename='js/main.js') }}" as="script">

    <style> /* Add this to style.css or within the <style> tag in head*/
        .md-alert {
            transition: opacity 0.5s ease-in-out;
        }
        .md-alert.animate-fade-out {
            opacity: 0;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-900 font-roboto antialiased flex flex-col min-h-screen">
    <a href="#main-content" class="fixed top-2 left-2 z-50 bg-primary-500 text-white px-4 py-2 rounded-lg transform -translate-y-full focus:translate-y-0 transition-transform duration-300">
        Przejdź do głównej treści
    </a>

    <header class="bg-white shadow-material-1">
        <div class="max-w-screen-xl mx-auto py-4 px-4 lg:px-6 flex justify-between items-center">
            <h1 class="text-2xl font-bold text-primary-500">Moje Paragony</h1>

            <nav class="flex items-center justify-between w-full flex-wrap">  <!-- Combined Navigation -->
                <button id="mobile-menu-toggle" aria-label="Toggle navigation" aria-expanded="false" class="md:hidden md-button-icon text-primary-500 hover:bg-primary-50">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                </button>
                <ul id="main-nav" class="hidden w-full md:flex md:w-auto md:items-center md:ml-auto space-x-4 md:space-x-6">
                    <li><a href="{{ url_for('receipts.index') }}" class="md-nav-link {% if request.endpoint == 'receipts.index' %}text-primary-500 font-semibold{% endif %} hover:text-primary-600 transition-colors">Strona Główna</a></li>
                    <li><a href="{{ url_for('receipts.receipt_list') }}" class="md-nav-link {% if request.endpoint == 'receipts.receipt_list' %}text-primary-500 font-semibold{% endif %} hover:text-primary-600 transition-colors">Lista Paragonów</a></li>
                    <li><a href="{{ url_for('receipts.upload') }}" class="md-button bg-primary-500 text-white hover:bg-primary-600 transition-colors">Dodaj Paragon</a></li>
                </ul>
            </nav>

        </div>
    </header>

    <main id="main-content" class="flex-grow md-container mt-8 mb-10 px-4 w-full max-w-screen-xl mx-auto">
        <div id="notification-container" class="fixed top-20 right-6 z-50 space-y-2">
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="md-alert md-alert-{{ category }} animate-bounce-in shadow-material-2">
                            {{ message }}
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
        </div>

        {% block content %}{% endblock %}  <!--- add base content block here --->

    </main>

    <footer class="bg-gray-100 py-6 mt-auto">
        <div class="md-container text-center max-w-screen-xl mx-auto px-4">
            <p class="text-gray-600">&copy; {{ current_year }} System Zarządzania Paragonami</p>
            <div class="mt-2 text-sm text-gray-500">Projekt zarządzania paragonami i inwentaryzacji</div>
        </div>
    </footer>

    <script src="{{ url_for('static', filename='js/main.js') }}" defer></script>  <!-- Single script include -->
    {% block extra_js %}{% endblock %}

    <script>
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const mobileMenu = document.getElementById('main-nav');

        mobileMenuToggle.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
            const isExpanded = !mobileMenu.classList.contains('hidden');
            mobileMenuToggle.setAttribute('aria-expanded', isExpanded);
        });


         //Make sure to include main.js after body has finished loading with defer

        document.addEventListener('DOMContentLoaded', function () {

            function removeNotifications() {
                const notifications = document.querySelectorAll('#notification-container .md-alert');
                notifications.forEach(notification => {
                    notification.classList.add('animate-fade-out');
                    notification.addEventListener('transitionend', () => { notification.remove();});
                });
            }
            setTimeout(removeNotifications, 5000);

        });
    </script>
</body>
</html>



================================================================================
File: src/web/templates/verify.html
================================================================================
{% extends "base.html" %}

{% block title %}Weryfikacja Paragonu{% endblock %}

{% block content %}
<div class="md-container px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <!-- Nagłówek -->
        <div class="mb-8">
            <h1 class="text-2xl font-bold text-primary-500 hover:text-primary-600 transition-colors">Weryfikacja Paragonu</h1>
            <p class="mt-2 text-gray-600">Sprawdź i edytuj dane z paragonu</p>
        </div>

        <!-- Formularz -->
        <form id="verifyForm" method="POST" class="space-y-6">
            {{ form.csrf_token }}
            {{ form.receipt_id }}

            <!-- Podstawowe informacje -->
            <div class="md-card bg-white rounded-lg shadow-material-1 p-6">
                <h2 class="text-lg font-medium text-gray-900 mb-4">Informacje podstawowe</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Nazwa sklepu -->
                    <div>
                        {{ form.store_name.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                        {{ form.store_name(class="md-input w-full") }}
                        {% if form.store_name.errors %}
                            {% for error in form.store_name.errors %}
                                <p class="mt-1 text-sm text-red-600">{{ error }}</p>
                            {% endfor %}
                        {% endif %}
                    </div>

                    <!-- Data zakupu -->
                    <div>
                        {{ form.purchase_date.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                        {{ form.purchase_date(class="md-input w-full", type="date") }}
                        {% if form.purchase_date.errors %}
                            {% for error in form.purchase_date.errors %}
                                <p class="mt-1 text-sm text-red-600">{{ error }}</p>
                            {% endfor %}
                        {% endif %}
                    </div>
                </div>
            </div>

            <!-- Lista produktów -->
            <div class="md-card bg-white rounded-lg shadow-material-1 p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-medium text-gray-900">Produkty</h2>
                    <button type="button" 
                            onclick="window.receiptForm.addProduct()"
                            class="md-button-outlined text-primary-500 hover:bg-primary-50">
                        Dodaj produkt
                    </button>
                </div>

                <div id="products-container" class="space-y-4">
                    {% for product in form.products %}
                    <div class="product-item border rounded-lg p-4 bg-gray-50">
                        <div class="flex justify-between mb-2">
                            <h3 class="text-sm font-medium text-gray-700">Produkt #{{ loop.index }}</h3>
                            <button type="button"
                                    onclick="window.receiptForm.removeProduct(this)"
                                    class="text-red-500 hover:text-red-700">
                                <span class="sr-only">Usuń produkt</span>
                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>

                        {{ product.id }}
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            <!-- Nazwa produktu -->
                            <div>
                                {{ product.form.name.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                                {{ product.form.name(class="md-input w-full product-name", autocomplete="off") }}
                            </div>

                            <!-- Cena jednostkowa -->
                            <div>
                                {{ product.form.unit_price.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                                {{ product.form.unit_price(class="md-input w-full price-input", type="number", step="0.01") }}
                            </div>

                            <!-- Ilość -->
                            <div>
                                {{ product.form.quantity.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                                {{ product.form.quantity(class="md-input w-full quantity-input", type="number", step="0.001") }}
                            </div>

                            <!-- Jednostka -->
                            <div>
                                {{ product.form.unit.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                                {{ product.form.unit(class="md-input w-full") }}
                            </div>

                            <!-- Kategoria -->
                            <div>
                                {{ product.form.category_id.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                                {{ product.form.category_id(class="md-select w-full") }}
                            </div>

                            <!-- Data ważności -->
                            <div>
                                {{ product.form.expiry_date.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                                {{ product.form.expiry_date(class="md-input w-full", type="date") }}
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>

            <!-- Podsumowanie -->
            <div class="md-card bg-white rounded-lg shadow-material-1 p-6">
                <div class="flex justify-between items-center">
                    <h2 class="text-lg font-medium text-gray-900">Podsumowanie</h2>
                    <div>
                        {{ form.total_amount.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                        {{ form.total_amount(class="md-input", type="number", step="0.01") }}
                        {% if form.total_amount.errors %}
                            {% for error in form.total_amount.errors %}
                                <p class="mt-1 text-sm text-red-600">{{ error }}</p>
                            {% endfor %}
                        {% endif %}
                    </div>
                </div>
            </div>

            <!-- Przyciski -->
            <div class="flex justify-end space-x-2">
                <a href="{{ url_for('receipts.receipt_list') }}" 
                   class="md-button-outlined text-gray-700 hover:bg-gray-50">
                    Anuluj
                </a>
                <button type="submit" class="md-button bg-primary-500 text-white hover:bg-primary-600">
                    Zapisz zmiany
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Szablon produktu -->
<template id="product-template">
    <div class="product-item border rounded-lg p-4 bg-gray-50">
        <div class="flex justify-between mb-2">
            <h3 class="text-sm font-medium text-gray-700">Nowy produkt</h3>
            <button type="button"
                    onclick="window.receiptForm.removeProduct(this)"
                    class="text-red-500 hover:text-red-700">
                <span class="sr-only">Usuń produkt</span>
                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Szablon pól produktu -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Nazwa produktu</label>
                <input type="text" name="products-{index}-name" class="md-input w-full product-name" autocomplete="off" required>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Cena jednostkowa</label>
                <input type="number" name="products-{index}-unit_price" class="md-input w-full price-input" step="0.01" required>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Ilość</label>
                <input type="number" name="products-{index}-quantity" class="md-input w-full quantity-input" step="0.001" required>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Jednostka</label>
                <input type="text" name="products-{index}-unit" class="md-input w-full">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Kategoria</label>
                <select name="products-{index}-category_id" class="md-select w-full">
                    <option value="0">-- Wybierz kategorię --</option>
                    {% for category in categories %}
                    <option value="{{ category.id }}">{{ category.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Data ważności</label>
                <input type="date" name="products-{index}-expiry_date" class="md-input w-full">
            </div>
        </div>
    </div>
</template>
{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/ReceiptVerificationForm.js') }}"></script>
{% endblock %}

================================================================================
File: src/web/templates/receipt_list.html
================================================================================
{% extends "base.html" %}

{% block title %}Lista Paragonów{% endblock %}

{% block content %}
<div class="md-container px-4 py-8">
    <!-- Nagłówek z przyciskiem dodawania -->
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-900">Lista Paragonów</h1>
        <a href="{{ url_for('receipts.upload') }}" 
           class="md-button bg-primary-500 text-white hover:bg-primary-600 transition-colors">
            Dodaj Paragon
        </a>
    </div>

    <!-- Karty paragonów -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {% for receipt in receipts %}
        <div class="md-card bg-white rounded-lg shadow-material-1 hover:shadow-material-2 transition-shadow">
            <div class="p-6">
                <div class="flex justify-between items-start mb-4">
                    <div>
                        <h3 class="text-lg font-medium text-gray-900">{{ receipt.store_name }}</h3>
                        <p class="text-sm text-gray-500">{{ receipt.purchase_date.strftime('%d.%m.%Y') }}</p>
                    </div>
                    <span class="px-2 py-1 text-sm rounded-full 
                        {% if receipt.status == 'verified' %}
                            bg-green-100 text-green-800
                        {% elif receipt.status == 'processing' %}
                            bg-yellow-100 text-yellow-800
                        {% else %}
                            bg-gray-100 text-gray-800
                        {% endif %}">
                        {{ receipt.status }}
                    </span>
                </div>

                <div class="mb-4">
                    <p class="text-gray-600">Suma: {{ "%.2f"|format(receipt.total_amount) }} zł</p>
                    <p class="text-sm text-gray-500">Liczba produktów: {{ receipt.products.count() }}</p>
                </div>

                <div class="flex justify-end space-x-2">
                    <a href="{{ url_for('receipts.verify_receipt', receipt_id=receipt.id) }}"
                       class="md-button-outlined text-primary-500 hover:bg-primary-50">
                        Weryfikuj
                    </a>
                    <button onclick="deleteReceipt({{ receipt.id }})"
                            class="md-button-outlined text-red-500 hover:bg-red-50">
                        Usuń
                    </button>
                </div>
            </div>
        </div>
        {% else %}
        <div class="col-span-full text-center py-12">
            <p class="text-gray-500">Brak paragonów do wyświetlenia</p>
            <a href="{{ url_for('receipts.upload') }}" 
               class="md-button bg-primary-500 text-white hover:bg-primary-600 mt-4">
                Dodaj pierwszy paragon
            </a>
        </div>
        {% endfor %}
    </div>
</div>

<!-- Modal potwierdzenia usunięcia -->
<div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
    <div class="flex items-center justify-center min-h-screen px-4">
        <div class="md-card bg-white rounded-lg shadow-material-2 max-w-md w-full">
            <div class="p-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Potwierdź usunięcie</h3>
                <p class="text-gray-600 mb-6">Czy na pewno chcesz usunąć ten paragon? Tej operacji nie można cofnąć.</p>
                <div class="flex justify-end space-x-2">
                    <button onclick="closeDeleteModal()"
                            class="md-button-outlined text-gray-500 hover:bg-gray-50">
                        Anuluj
                    </button>
                    <button id="confirmDelete"
                            class="md-button bg-red-500 text-white hover:bg-red-600">
                        Usuń
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
let receiptToDelete = null;

function deleteReceipt(id) {
    receiptToDelete = id;
    document.getElementById('deleteModal').classList.remove('hidden');
}

function closeDeleteModal() {
    receiptToDelete = null;
    document.getElementById('deleteModal').classList.add('hidden');
}

document.getElementById('confirmDelete').addEventListener('click', async function() {
    if (!receiptToDelete) return;
    
    try {
        const response = await fetch(`/receipts/${receiptToDelete}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();
    if (response.ok) {
        showNotification('success', data.message);
        setTimeout(() => window.location.reload(), 1000);
    } else {
        showNotification('error', data.message || 'Wystąpił błąd podczas usuwania paragonu');
        }
    } catch (error) {
        showNotification('error', 'Wystąpił błąd podczas usuwania paragonu');
    } finally {
        closeDeleteModal();
    }
});

function showNotification(type, message) {
    const container = document.getElementById('notification-container');
    const notification = document.createElement('div');
    notification.className = `md-alert md-alert-${type} animate-bounce-in`;
    notification.textContent = message;
    
    container.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('animate-fade-out');
        setTimeout(() => notification.remove(), 500);
    }, 5000);
}
</script>
{% endblock %}

================================================================================
File: src/web/templates/upload.html
================================================================================
{% extends "base.html" %}

{% block title %}Dodaj Nowy Paragon{% endblock %}

{% block content %}
<div class="md-container px-4 py-8">
    <div class="max-w-2xl mx-auto">
        <!-- Nagłówek -->
        <div class="mb-8">
            <h1 class="text-2xl font-bold text-gray-900">Dodaj Nowy Paragon</h1>
            <p class="mt-2 text-gray-600">Wypełnij formularz i dodaj zdjęcie paragonu</p>
        </div>

        <!-- Formularz -->
        <form method="POST" enctype="multipart/form-data" class="md-card bg-white rounded-lg shadow-material-1 p-6">
            {{ form.csrf_token }}
            
            <!-- Nazwa sklepu -->
            <div class="mb-6">
                {{ form.store_name.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                {{ form.store_name(class="md-input w-full") }}
                {% if form.store_name.errors %}
                    {% for error in form.store_name.errors %}
                        <p class="mt-1 text-sm text-red-600">{{ error }}</p>
                    {% endfor %}
                {% endif %}
            </div>

            <!-- Data zakupu -->
            <div class="mb-6">
                {{ form.purchase_date.label(class="block text-sm font-medium text-gray-700 mb-1") }}
                {{ form.purchase_date(class="md-input w-full", type="date") }}
                {% if form.purchase_date.errors %}
                    {% for error in form.purchase_date.errors %}
                        <p class="mt-1 text-sm text-red-600">{{ error }}</p>
                    {% endfor %}
                {% endif %}
            </div>

            <!-- Upload zdjęcia -->
            <div class="mb-6">
                <div class="space-y-2">
                    {{ form.receipt_image.label(class="block text-sm font-medium text-gray-700") }}
                    <div class="flex items-center space-x-2">
                        <label class="md-button-outlined cursor-pointer">
                            <span>Wybierz plik</span>
                            {{ form.receipt_image(class="hidden", onchange="showPreview(event)") }}
                        </label>
                        <span id="file-name" class="text-sm text-gray-500">Nie wybrano pliku</span>
                    </div>
                    {% if form.receipt_image.errors %}
                        {% for error in form.receipt_image.errors %}
                            <p class="mt-1 text-sm text-red-600">{{ error }}</p>
                        {% endfor %}
                    {% endif %}
                </div>
                
                <!-- Podgląd zdjęcia -->
                <div id="image-preview" class="hidden mt-4">
                    <img id="preview" class="max-w-full h-auto rounded-lg shadow-sm" src="" alt="Podgląd paragonu">
                </div>
            </div>

            <!-- Przyciski -->
            <div class="flex justify-end space-x-2">
                <a href="{{ url_for('receipts.receipt_list') }}" 
                   class="md-button-outlined text-gray-700 hover:bg-gray-50">
                    Anuluj
                </a>
                <button type="submit" class="md-button bg-primary-500 text-white hover:bg-primary-600">
                    Dodaj paragon
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
function showPreview(event) {
    const input = event.target;
    const preview = document.getElementById('preview');
    const previewContainer = document.getElementById('image-preview');
    const fileName = document.getElementById('file-name');
    
    fileName.textContent = input.files[0]?.name || 'Nie wybrano pliku';
    
    if (input.files && input.files[0]) {
        const reader = new FileReader();
        
        reader.onload = function(e) {
            preview.src = e.target.result;
            previewContainer.classList.remove('hidden');
        }
        
        reader.readAsDataURL(input.files[0]);
    } else {
        previewContainer.classList.add('hidden');
    }
}
</script>
{% endblock %}

================================================================================
File: src/web/templates/errors/404.html
================================================================================
{% extends "base.html" %}

{% block title %}404 - Nie znaleziono strony{% endblock %}

{% block content %}
<div class="min-h-screen flex items-center justify-center px-4 py-12">
    <div class="md-card max-w-md w-full text-center space-y-6">
        <div class="space-y-4">
            <h1 class="text-9xl font-bold text-primary-500">404</h1>
            <h2 class="text-2xl font-medium text-gray-900">Strona nie została znaleziona</h2>
            <p class="text-gray-600">Przepraszamy, ale strona której szukasz nie istnieje lub została przeniesiona.</p>
        </div>

        <div>
            <a href="{{ url_for('receipts.index') }}" 
               class="md-button inline-flex items-center space-x-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
                </svg>
                <span>Wróć do strony głównej</span>
            </a>
        </div>
    </div>
</div>
{% endblock %}

================================================================================
File: src/web/templates/errors/500.html
================================================================================
{% extends "base.html" %}

{% block title %}500 - Błąd serwera{% endblock %}

{% block content %}
<div class="min-h-screen flex items-center justify-center px-4 py-12">
    <div class="md-card max-w-md w-full text-center space-y-6">
        <div class="space-y-4">
            <h1 class="text-9xl font-bold text-error-500">500</h1>
            <h2 class="text-2xl font-medium text-gray-900">Błąd serwera</h2>
            <p class="text-gray-600">Przepraszamy, wystąpił nieoczekiwany błąd. Nasi programiści zostali powiadomieni o problemie.</p>
        </div>

        <div class="space-y-4">
            <a href="{{ url_for('receipts.index') }}" 
               class="md-button inline-flex items-center space-x-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
                </svg>
                <span>Wróć do strony głównej</span>
            </a>
            
            <button onclick="window.location.reload()" 
                    class="md-button-outlined inline-flex items-center space-x-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                </svg>
                <span>Spróbuj ponownie</span>
            </button>
        </div>
    </div>
</div>
{% endblock %}

================================================================================
File: tests/conftest.py
================================================================================
import pytest
from src.web import create_app
from src.database import db as _db
from datetime import datetime
from src.config import Config


class TestConfig(Config):
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    WTF_CSRF_ENABLED = False


@pytest.fixture(scope='session')
def app():
    """Create and configure a new app instance for each test session."""
    app = create_app(TestConfig)
    
    # Utworzenie kontekstu aplikacji
    ctx = app.app_context()
    ctx.push()

    yield app

    ctx.pop()


@pytest.fixture(scope='function')
def db(app):
    """Create a new database for each test."""
    with app.app_context():
        _db.create_all()
        yield _db
        _db.session.close()
        _db.drop_all()


@pytest.fixture(scope='function')
def client(app):
    return app.test_client()

================================================================================
File: tests/test_api.py
================================================================================
import pytest
from src.web.app import app
from src.database.manager import DatabaseManager
from pathlib import Path
import json
import os
from io import BytesIO


@pytest.fixture
def client():
    app.config['TESTING'] = True
    app.config['UPLOAD_FOLDER'] = Path('test_uploads')
    with app.test_client() as client:
        yield client
    # Cleanup
    if os.path.exists('test_uploads'):
        for file in Path('test_uploads').glob('*'):
            file.unlink()
        Path('test_uploads').rmdir()


@pytest.fixture
def sample_receipt_data():
    return {
        'store': 'Test Store',
        'date': '2024-01-20',
        'products': [
            {
                'name': 'Test Product 1',
                'quantity': 2,
                'price': 25.25,
                'unit': 'szt'
            },
            {
                'name': 'Test Product 2',
                'quantity': 1,
                'price': 50.00,
                'unit': 'szt'
            }
        ],
        'total': 100.50
    }


def test_index(client):
    """Test strony głównej"""
    response = client.get('/')
    assert response.status_code == 200
    assert b'Smart Zapasy' in response.data


def test_upload_no_file(client):
    """Test uploadu bez pliku"""
    response = client.post('/upload')
    assert response.status_code == 302  # Redirect


def test_upload_invalid_file(client):
    """Test uploadu nieprawidłowego pliku"""
    data = {
        'receipt': (BytesIO(b'invalid file content'), 'test.txt')
    }
    response = client.post('/upload', data=data, content_type='multipart/form-data')
    assert response.status_code == 302  # Redirect


def test_upload_valid_file(client):
    """Test uploadu prawidłowego pliku"""
    # Tworzenie przykładowego obrazu PNG
    from PIL import Image
    import io

    img = Image.new('RGB', (100, 100), color='white')
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG')
    img_byte_arr = img_byte_arr.getvalue()

    data = {
        'receipt': (BytesIO(img_byte_arr), 'test.png')
    }
    response = client.post('/upload', data=data, content_type='multipart/form-data')
    assert response.status_code == 200
    assert b'Weryfikacja' in response.data


def test_save_receipt(client, sample_receipt_data):
    """Test zapisywania paragonu"""
    response = client.post('/save',
                           data=json.dumps(sample_receipt_data),
                           content_type='application/json')
    assert response.status_code == 200
    data = json.loads(response.data)
    assert data['success'] is True


def test_save_receipt_invalid_data(client):
    """Test zapisywania paragonu z nieprawidłowymi danymi"""
    invalid_data = {
        'store': 'Test Store',
        # brak wymaganych pól
    }
    response = client.post('/save',
                           data=json.dumps(invalid_data),
                           content_type='application/json')
    assert response.status_code == 400
    data = json.loads(response.data)
    assert data['success'] is False


def test_list_receipts(client):
    """Test listy paragonów"""
    response = client.get('/receipts')
    assert response.status_code == 200
    assert b'Lista paragon' in response.data


def test_view_receipt(client, sample_receipt_data):
    """Test widoku szczegółów paragonu"""
    # Najpierw zapisz paragon
    response = client.post('/save',
                           data=json.dumps(sample_receipt_data),
                           content_type='application/json')
    data = json.loads(response.data)
    receipt_id = data['receipt_id']

    # Następnie sprawdź widok szczegółów
    response = client.get(f'/receipt/{receipt_id}')
    assert response.status_code == 200
    assert b'Test Store' in response.data


def test_view_nonexistent_receipt(client):
    """Test widoku nieistniejącego paragonu"""
    response = client.get('/receipt/999')
    assert response.status_code == 302  # Redirect
# API tests

================================================================================
File: tests/test_database.py
================================================================================
import pytest
from src.database.manager import DatabaseManager
from src.database.models import Receipt, ReceiptItem
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import os
from datetime import datetime


@pytest.fixture
def test_db():
    """Tworzy tymczasową bazę danych dla testów"""
    test_db_path = "sqlite:///test_receipts.db"
    engine = create_engine(test_db_path)

    # Tworzenie tabel
    from src.database.models import Base
    Base.metadata.create_all(engine)

    yield test_db_path

    # Czyszczenie po testach
    os.remove("test_receipts.db")


@pytest.fixture
def db_manager(test_db):
    """Tworzy instancję DatabaseManager z testową bazą"""
    os.environ['DATABASE_URL'] = test_db
    manager = DatabaseManager()
    yield manager
    manager.session.close()


def test_save_receipt(db_manager):
    """Test zapisywania paragonu"""
    receipt_data = {
        'store': 'Test Store',
        'date': '2024-01-20',
        'total': 100.50,
        'items': [
            {
                'name': 'Test Product 1',
                'quantity': 2,
                'price': 25.25,
                'unit': 'szt'
            },
            {
                'name': 'Test Product 2',
                'quantity': 1,
                'price': 50.00,
                'unit': 'szt'
            }
        ]
    }

    # Zapisanie paragonu
    receipt = db_manager.save_receipt(receipt_data)

    # Sprawdzenie czy paragon został zapisany
    assert receipt.id is not None
    assert receipt.store == 'Test Store'
    assert receipt.total == 100.50
    assert len(receipt.items) == 2


def test_get_receipts(db_manager):
    """Test pobierania listy paragonów"""
    # Dodanie testowych paragonów
    for i in range(3):
        receipt_data = {
            'store': f'Test Store {i}',
            'date': '2024-01-20',
            'total': 100.00 + i,
            'items': [
                {
                    'name': f'Test Product {i}',
                    'quantity': 1,
                    'price': 100.00 + i,
                    'unit': 'szt'
                }
            ]
        }
        db_manager.save_receipt(receipt_data)

    # Pobranie paragonów
    receipts = db_manager.get_receipts()

    # Sprawdzenie wyników
    assert len(receipts) == 3
    assert all(isinstance(r, Receipt) for r in receipts)
    assert receipts[0].total > receipts[1].total  # Sprawdzenie sortowania


def test_get_receipt(db_manager):
    """Test pobierania pojedynczego paragonu"""
    # Dodanie testowego paragonu
    receipt_data = {
        'store': 'Test Store',
        'date': '2024-01-20',
        'total': 100.50,
        'items': [
            {
                'name': 'Test Product',
                'quantity': 1,
                'price': 100.50,
                'unit': 'szt'
            }
        ]
    }
    saved_receipt = db_manager.save_receipt(receipt_data)

    # Pobranie paragonu
    receipt = db_manager.get_receipt(saved_receipt.id)

    # Sprawdzenie wyników
    assert receipt is not None
    assert receipt.id == saved_receipt.id
    assert receipt.store == 'Test Store'
    assert receipt.total == 100.50
    assert len(receipt.items) == 1


def test_receipt_not_found(db_manager):
    """Test pobierania nieistniejącego paragonu"""
    receipt = db_manager.get_receipt(999)
    assert receipt is None


def test_inventory_management(db_manager):
    """Test zarządzania stanem magazynowym"""
    # Najpierw dodajmy testowy paragon
    receipt_data = {
        'store': 'Test Store',
        'date': '2024-01-20',
        'total': 100.50,
        'items': [
            {
                'name': 'Produkt testowy 1',
                'quantity': 5,
                'price': 20.00,
                'unit': 'szt',
                'current_quantity': 5,
                'expiry_date': '2024-06-20',
                'notes': 'Notatka testowa'
            },
            {
                'name': 'Produkt testowy 2',
                'quantity': 2,
                'price': 10.25,
                'unit': 'kg',
                'current_quantity': 2,
                'expiry_date': None,
                'notes': None
            }
        ]
    }

    # Zapisz paragon
    receipt = db_manager.save_receipt(receipt_data)
    assert receipt is not None

    # Pobierz stan magazynowy
    inventory = db_manager.get_inventory_items()
    assert len(inventory) == 2

    # Sprawdź czy stany są poprawne
    first_item = inventory[0]
    assert first_item.name == 'Produkt testowy 1'
    assert first_item.current_quantity == 5

    # Zaktualizuj ilość pierwszego produktu
    success = db_manager.update_item_quantity(first_item.id, 3, "Zużyto 2 sztuki")
    assert success is True

    # Sprawdź czy aktualizacja się powiodła
    updated_inventory = db_manager.get_inventory_items()
    updated_item = next(item for item in updated_inventory if item.id == first_item.id)
    assert updated_item.current_quantity == 3
    assert "Zużyto 2 sztuki" in updated_item.notes
# Database tests

================================================================================
File: tests/test_ocr.py
================================================================================
import pytest
from src.services.ocr import OCRService
from pathlib import Path
from unittest.mock import Mock, patch
import os


@pytest.fixture
def mock_vision_client():
    with patch('src.services.ocr.vision.ImageAnnotatorClient') as mock:
        yield mock


@pytest.fixture
def ocr_service(mock_vision_client):
    return OCRService("dummy_path")


def test_extract_store():
    """Test wyciągania nazwy sklepu z tekstu"""
    ocr = OCRService("dummy_path")
    sample_text = """BIEDRONKA
    ul. Przykładowa 123
    01-234 Warszawa
    2024-01-20"""

    assert ocr._extract_store(sample_text) == "BIEDRONKA"


def test_extract_date():
    """Test wyciągania daty z tekstu"""
    ocr = OCRService("dummy_path")
    sample_text = """BIEDRONKA
    Data: 2024-01-20"""

    result = ocr._extract_date(sample_text)
    assert result is not None
    assert result.year == 2024
    assert result.month == 1
    assert result.day == 20


def test_parse_product_line():
    """Test parsowania linii z produktem"""
    ocr = OCRService("dummy_path")
    sample_lines = [
        "Chleb 3.99",
        "Masło 200g 7.99",
        "Mleko 1l 4.50",
        "Jabłka 1.5kg 7.49"
    ]

    expected_results = [
        {'name': 'Chleb', 'quantity': 1, 'unit': 'szt', 'price': 3.99},
        {'name': 'Masło', 'quantity': 200, 'unit': 'g', 'price': 7.99},
        {'name': 'Mleko', 'quantity': 1, 'unit': 'l', 'price': 4.50},
        {'name': 'Jabłka', 'quantity': 1.5, 'unit': 'kg', 'price': 7.49}
    ]

    for line, expected in zip(sample_lines, expected_results):
        result = ocr._parse_product_line(line)
        assert result is not None
        assert result['name'] == expected['name']
        assert result['price'] == expected['price']


@pytest.mark.integration
def test_process_image(ocr_service, mock_vision_client):
    """Test przetwarzania całego paragonu"""
    # Przygotowanie mocka odpowiedzi z Google Vision
    mock_response = Mock()
    mock_response.text_annotations = [Mock(description="""
    BIEDRONKA
    ul. Przykładowa 123
    2024-01-20

    Chleb 3.99
    Masło 200g 7.99
    Mleko 1l 4.50

    SUMA PLN 16.48
    """)]
    mock_response.error = Mock(message=None)

    mock_vision_client.return_value.text_detection.return_value = mock_response

    # Wykonanie testu
    result = ocr_service.process_image("dummy_path")

    # Sprawdzenie rezultatów
    assert result is not None
    assert result['store'] == "BIEDRONKA"
    assert result['date'] == "2024-01-20"
    assert len(result['products']) == 3
    assert result['total'] == 16.48
# OCR tests
