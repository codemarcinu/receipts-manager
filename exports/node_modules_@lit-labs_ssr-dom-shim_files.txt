=== Directory: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@lit-labs\ssr-dom-shim ===


================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@lit-labs\ssr-dom-shim\index.d.ts
================================================================================

export { ariaMixinAttributes, ElementInternals, HYDRATE_INTERNALS_ATTR_PREFIX, } from './lib/element-internals.js';
declare const ElementShimWithRealType: typeof Element;
export { ElementShimWithRealType as Element };
declare const HTMLElementShimWithRealType: typeof HTMLElement;
export { HTMLElementShimWithRealType as HTMLElement };
declare const CustomElementRegistryShimWithRealType: typeof CustomElementRegistry;
export { CustomElementRegistryShimWithRealType as CustomElementRegistry };
export declare const customElements: CustomElementRegistry;
//# sourceMappingURL=index.d.ts.map
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@lit-labs\ssr-dom-shim\index.d.ts.map
================================================================================

{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"AAOA,OAAO,EACL,mBAAmB,EACnB,gBAAgB,EAChB,6BAA6B,GAC9B,MAAM,4BAA4B,CAAC;AA2GpC,QAAA,MAAM,uBAAuB,EAA4B,OAAO,OAAO,CAAC;AACxE,OAAO,EAAC,uBAAuB,IAAI,OAAO,EAAC,CAAC;AAG5C,QAAA,MAAM,2BAA2B,EACF,OAAO,WAAW,CAAC;AAClD,OAAO,EAAC,2BAA2B,IAAI,WAAW,EAAC,CAAC;AA2DpD,QAAA,MAAM,qCAAqC,EACF,OAAO,qBAAqB,CAAC;AACtE,OAAO,EAAC,qCAAqC,IAAI,qBAAqB,EAAC,CAAC;AAExE,eAAO,MAAM,cAAc,uBAA8C,CAAC"}
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@lit-labs\ssr-dom-shim\index.js
================================================================================

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { ElementInternalsShim } from './lib/element-internals.js';
export { ariaMixinAttributes, ElementInternals, HYDRATE_INTERNALS_ATTR_PREFIX, } from './lib/element-internals.js';
const attributes = new WeakMap();
const attributesForElement = (element) => {
    let attrs = attributes.get(element);
    if (attrs === undefined) {
        attributes.set(element, (attrs = new Map()));
    }
    return attrs;
};
// The typings around the exports below are a little funky:
//
// 1. We want the `name` of the shim classes to match the real ones at runtime,
//    hence e.g. `class Element`.
// 2. We can't shadow the global types with a simple class declaration, because
//    then we can't reference the global types for casting, hence e.g.
//    `const ElementShim = class Element`.
// 3. We want to export the classes typed as the real ones, hence e.g.
//    `const ElementShimWithRealType = ElementShim as object as typeof Element;`.
// 4. We want the exported names to match the real ones, hence e.g.
//    `export {ElementShimWithRealType as Element}`.
const ElementShim = class Element {
    constructor() {
        this.__shadowRootMode = null;
        this.__shadowRoot = null;
        this.__internals = null;
    }
    get attributes() {
        return Array.from(attributesForElement(this)).map(([name, value]) => ({
            name,
            value,
        }));
    }
    get shadowRoot() {
        if (this.__shadowRootMode === 'closed') {
            return null;
        }
        return this.__shadowRoot;
    }
    get localName() {
        return this.constructor.__localName;
    }
    get tagName() {
        return this.localName?.toUpperCase();
    }
    setAttribute(name, value) {
        // Emulate browser behavior that silently casts all values to string. E.g.
        // `42` becomes `"42"` and `{}` becomes `"[object Object]""`.
        attributesForElement(this).set(name, String(value));
    }
    removeAttribute(name) {
        attributesForElement(this).delete(name);
    }
    toggleAttribute(name, force) {
        // Steps reference https://dom.spec.whatwg.org/#dom-element-toggleattribute
        if (this.hasAttribute(name)) {
            // Step 5
            if (force === undefined || !force) {
                this.removeAttribute(name);
                return false;
            }
        }
        else {
            // Step 4
            if (force === undefined || force) {
                // Step 4.1
                this.setAttribute(name, '');
                return true;
            }
            else {
                // Step 4.2
                return false;
            }
        }
        // Step 6
        return true;
    }
    hasAttribute(name) {
        return attributesForElement(this).has(name);
    }
    attachShadow(init) {
        const shadowRoot = { host: this };
        this.__shadowRootMode = init.mode;
        if (init && init.mode === 'open') {
            this.__shadowRoot = shadowRoot;
        }
        return shadowRoot;
    }
    attachInternals() {
        if (this.__internals !== null) {
            throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': ` +
                `ElementInternals for the specified element was already attached.`);
        }
        const internals = new ElementInternalsShim(this);
        this.__internals = internals;
        return internals;
    }
    getAttribute(name) {
        const value = attributesForElement(this).get(name);
        return value ?? null;
    }
};
const ElementShimWithRealType = ElementShim;
export { ElementShimWithRealType as Element };
const HTMLElementShim = class HTMLElement extends ElementShim {
};
const HTMLElementShimWithRealType = HTMLElementShim;
export { HTMLElementShimWithRealType as HTMLElement };
const CustomElementRegistryShim = class CustomElementRegistry {
    constructor() {
        this.__definitions = new Map();
    }
    define(name, ctor) {
        if (this.__definitions.has(name)) {
            if (process.env.NODE_ENV === 'development') {
                console.warn(`'CustomElementRegistry' already has "${name}" defined. ` +
                    `This may have been caused by live reload or hot module ` +
                    `replacement in which case it can be safely ignored.\n` +
                    `Make sure to test your application with a production build as ` +
                    `repeat registrations will throw in production.`);
            }
            else {
                throw new Error(`Failed to execute 'define' on 'CustomElementRegistry': ` +
                    `the name "${name}" has already been used with this registry`);
            }
        }
        // Provide tagName and localName for the component.
        ctor.__localName = name;
        this.__definitions.set(name, {
            ctor,
            // Note it's important we read `observedAttributes` in case it is a getter
            // with side-effects, as is the case in Lit, where it triggers class
            // finalization.
            //
            // TODO(aomarks) To be spec compliant, we should also capture the
            // registration-time lifecycle methods like `connectedCallback`. For them
            // to be actually accessible to e.g. the Lit SSR element renderer, though,
            // we'd need to introduce a new API for accessing them (since `get` only
            // returns the constructor).
            observedAttributes: ctor.observedAttributes ?? [],
        });
    }
    get(name) {
        const definition = this.__definitions.get(name);
        return definition?.ctor;
    }
};
const CustomElementRegistryShimWithRealType = CustomElementRegistryShim;
export { CustomElementRegistryShimWithRealType as CustomElementRegistry };
export const customElements = new CustomElementRegistryShimWithRealType();
//# sourceMappingURL=index.js.map
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@lit-labs\ssr-dom-shim\index.js.map
================================================================================

{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {ElementInternalsShim} from './lib/element-internals.js';\n\nexport {\n  ariaMixinAttributes,\n  ElementInternals,\n  HYDRATE_INTERNALS_ATTR_PREFIX,\n} from './lib/element-internals.js';\n\nconst attributes = new WeakMap<\n  InstanceType<typeof HTMLElementShim>,\n  Map<string, string>\n>();\nconst attributesForElement = (\n  element: InstanceType<typeof HTMLElementShim>\n) => {\n  let attrs = attributes.get(element);\n  if (attrs === undefined) {\n    attributes.set(element, (attrs = new Map()));\n  }\n  return attrs;\n};\n\n// The typings around the exports below are a little funky:\n//\n// 1. We want the `name` of the shim classes to match the real ones at runtime,\n//    hence e.g. `class Element`.\n// 2. We can't shadow the global types with a simple class declaration, because\n//    then we can't reference the global types for casting, hence e.g.\n//    `const ElementShim = class Element`.\n// 3. We want to export the classes typed as the real ones, hence e.g.\n//    `const ElementShimWithRealType = ElementShim as object as typeof Element;`.\n// 4. We want the exported names to match the real ones, hence e.g.\n//    `export {ElementShimWithRealType as Element}`.\nconst ElementShim = class Element {\n  get attributes() {\n    return Array.from(attributesForElement(this)).map(([name, value]) => ({\n      name,\n      value,\n    }));\n  }\n  private __shadowRootMode: null | ShadowRootMode = null;\n  protected __shadowRoot: null | ShadowRoot = null;\n  protected __internals: null | ElementInternals = null;\n\n  get shadowRoot() {\n    if (this.__shadowRootMode === 'closed') {\n      return null;\n    }\n    return this.__shadowRoot;\n  }\n  get localName() {\n    return (this.constructor as NamedCustomHTMLElementConstructor).__localName;\n  }\n  get tagName() {\n    return this.localName?.toUpperCase();\n  }\n  setAttribute(name: string, value: unknown): void {\n    // Emulate browser behavior that silently casts all values to string. E.g.\n    // `42` becomes `\"42\"` and `{}` becomes `\"[object Object]\"\"`.\n    attributesForElement(this).set(name, String(value));\n  }\n  removeAttribute(name: string) {\n    attributesForElement(this).delete(name);\n  }\n  toggleAttribute(name: string, force?: boolean): boolean {\n    // Steps reference https://dom.spec.whatwg.org/#dom-element-toggleattribute\n    if (this.hasAttribute(name)) {\n      // Step 5\n      if (force === undefined || !force) {\n        this.removeAttribute(name);\n        return false;\n      }\n    } else {\n      // Step 4\n      if (force === undefined || force) {\n        // Step 4.1\n        this.setAttribute(name, '');\n        return true;\n      } else {\n        // Step 4.2\n        return false;\n      }\n    }\n    // Step 6\n    return true;\n  }\n  hasAttribute(name: string) {\n    return attributesForElement(this).has(name);\n  }\n  attachShadow(init: ShadowRootInit): ShadowRoot {\n    const shadowRoot = {host: this} as object as ShadowRoot;\n    this.__shadowRootMode = init.mode;\n    if (init && init.mode === 'open') {\n      this.__shadowRoot = shadowRoot;\n    }\n    return shadowRoot;\n  }\n  attachInternals(): ElementInternals {\n    if (this.__internals !== null) {\n      throw new Error(\n        `Failed to execute 'attachInternals' on 'HTMLElement': ` +\n          `ElementInternals for the specified element was already attached.`\n      );\n    }\n    const internals = new ElementInternalsShim(this as unknown as HTMLElement);\n    this.__internals = internals;\n    return internals as ElementInternals;\n  }\n  getAttribute(name: string) {\n    const value = attributesForElement(this).get(name);\n    return value ?? null;\n  }\n};\nconst ElementShimWithRealType = ElementShim as object as typeof Element;\nexport {ElementShimWithRealType as Element};\n\nconst HTMLElementShim = class HTMLElement extends ElementShim {};\nconst HTMLElementShimWithRealType =\n  HTMLElementShim as object as typeof HTMLElement;\nexport {HTMLElementShimWithRealType as HTMLElement};\n\ninterface CustomHTMLElementConstructor {\n  new (): HTMLElement;\n  observedAttributes?: string[];\n}\n\ninterface NamedCustomHTMLElementConstructor\n  extends CustomHTMLElementConstructor {\n  __localName: string;\n}\n\ntype CustomElementRegistration = {\n  ctor: {new (): HTMLElement};\n  observedAttributes: string[];\n};\n\nconst CustomElementRegistryShim = class CustomElementRegistry {\n  private __definitions = new Map<string, CustomElementRegistration>();\n\n  define(name: string, ctor: CustomHTMLElementConstructor) {\n    if (this.__definitions.has(name)) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          `'CustomElementRegistry' already has \"${name}\" defined. ` +\n            `This may have been caused by live reload or hot module ` +\n            `replacement in which case it can be safely ignored.\\n` +\n            `Make sure to test your application with a production build as ` +\n            `repeat registrations will throw in production.`\n        );\n      } else {\n        throw new Error(\n          `Failed to execute 'define' on 'CustomElementRegistry': ` +\n            `the name \"${name}\" has already been used with this registry`\n        );\n      }\n    }\n    // Provide tagName and localName for the component.\n    (ctor as NamedCustomHTMLElementConstructor).__localName = name;\n    this.__definitions.set(name, {\n      ctor,\n      // Note it's important we read `observedAttributes` in case it is a getter\n      // with side-effects, as is the case in Lit, where it triggers class\n      // finalization.\n      //\n      // TODO(aomarks) To be spec compliant, we should also capture the\n      // registration-time lifecycle methods like `connectedCallback`. For them\n      // to be actually accessible to e.g. the Lit SSR element renderer, though,\n      // we'd need to introduce a new API for accessing them (since `get` only\n      // returns the constructor).\n      observedAttributes: ctor.observedAttributes ?? [],\n    });\n  }\n\n  get(name: string) {\n    const definition = this.__definitions.get(name);\n    return definition?.ctor;\n  }\n};\nconst CustomElementRegistryShimWithRealType =\n  CustomElementRegistryShim as object as typeof CustomElementRegistry;\nexport {CustomElementRegistryShimWithRealType as CustomElementRegistry};\n\nexport const customElements = new CustomElementRegistryShimWithRealType();\n"]}
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@lit-labs\ssr-dom-shim\package.json
================================================================================

{
  "name": "@lit-labs/ssr-dom-shim",
  "version": "1.2.1",
  "publishConfig": {
    "access": "public"
  },
  "description": "DOM shim for Lit Server Side Rendering (SSR)",
  "license": "BSD-3-Clause",
  "author": "Google LLC",
  "homepage": "https://github.com/lit/lit/tree/main/packages/labs/ssr-dom-shim",
  "repository": {
    "type": "git",
    "url": "https://github.com/lit/lit.git",
    "directory": "packages/labs/ssr-dom-shim"
  },
  "main": "index.js",
  "typings": "index.d.ts",
  "type": "module",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "default": "./index.js"
    }
  },
  "files": [
    "index.{d.ts,d.ts.map,js,js.map}",
    "lib/"
  ],
  "scripts": {
    "build": "wireit",
    "build:ts": "wireit",
    "test": "wireit"
  },
  "wireit": {
    "build": {
      "dependencies": [
        "build:ts"
      ]
    },
    "build:ts": {
      "command": "tsc --build --pretty",
      "clean": "if-file-deleted",
      "files": [
        "src/**/*.ts",
        "tsconfig.json"
      ],
      "output": [
        "lib/",
        "index.{d.ts,d.ts.map,js,js.map}",
        "tsconfig.tsbuildinfo"
      ]
    },
    "test": {
      "command": "uvu test \"_test\\.js$\"",
      "dependencies": [
        "build"
      ],
      "env": {
        "NODE_OPTIONS": "--enable-source-maps"
      },
      "output": []
    }
  }
}

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@lit-labs\ssr-dom-shim\README.md
================================================================================

# @lit-labs/ssr-dom-shim

## Overview

This package provides minimal implementations of `Element`, `HTMLElement`,
`CustomElementRegistry`, and `customElements`, designed to be used when Server
Side Rendering (SSR) web components from Node, including Lit components.

## Usage

### Usage from Lit

Lit itself automatically imports these shims when running in Node, so Lit users
should typically not need to directly depend on or import from this package.

See the [lit.dev SSR docs](https://lit.dev/docs/ssr/overview/) for general
information about server-side rendering with Lit.

### Usage in other contexts

Other libraries or frameworks who wish to support SSR are welcome to also depend
on these shims. (This package is planned to eventually move to
`@webcomponents/ssr-dom-shim` to better reflect this use case). There are two
main patterns for providing access to these shims to users:

1. Assigning shims to `globalThis`, ensuring that assignment occurs before
   user-code runs.

2. Importing shims directly from the module that provides your base class, using
   the `node` [export
   condition](https://nodejs.org/api/packages.html#conditional-exports) to
   ensure this only happens when running in Node, and not in the browser.

Lit takes approach #2 for all of the shims except for `customElements`, so that
users who have imported `lit` are able to call `customElements.define` in their
components from Node.

### Exports

The main module exports the following values. Note that no globals are set by
this module.

- [`Element`](https://developer.mozilla.org/en-US/docs/Web/API/Element)
  - [`attachShadow`](https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow)
  - [`shadowRoot`](https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot)
  - [`attributes`](https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes)
  - [`hasAttribute`](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute)
  - [`getAttribute`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute)
  - [`setAttribute`](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)
  - [`removeAttribute`](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute)
- [`HTMLElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement)
  - (Inherits from Element)
- [`CustomElementRegistry`](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry)
- [`customElements`](https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements)

## Contributing

Please see [CONTRIBUTING.md](../../../CONTRIBUTING.md).
