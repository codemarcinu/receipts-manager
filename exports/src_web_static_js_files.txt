=== Directory: C:\Users\marci\Documents\GitHub\receipts-manager\src\web\static\js ===


================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\web\static\js\main.js
================================================================================

// ReceiptVerificationForm.js
/**
 * ReceiptVerificationForm.js
 * Obsługa formularza weryfikacji paragonów
 */

class ReceiptVerificationForm {
    constructor() {
        this.productsContainer = document.getElementById('products-container');
        this.form = document.getElementById('verifyForm');
        this.totalInput = document.getElementById('total_amount');
        
        this.initializeEventListeners();
        this.initializeExistingProducts();
    }

    initializeEventListeners() {
        // Nasłuchiwanie zmian w polach ceny i ilości z debouncingiem
        let debounceTimeout;
        this.form.addEventListener('input', (e) => {
            if (e.target.classList.contains('price-input') ||
                e.target.classList.contains('quantity-input')) {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(() => this.updateTotalAmount(), 300);
            }
        });

        // Obsługa submitu formularza
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    initializeExistingProducts() {
        // Inicjalizacja autouzupełniania dla istniejących produktów
        document.querySelectorAll('.product-name').forEach(input => {
            this.initializeAutocomplete(input);
        });

        // Inicjalne przeliczenie sumy
        this.updateTotalAmount();
    }

    async initializeAutocomplete(input) {
        let timeout = null;
        
        input.addEventListener('input', async (e) => {
            clearTimeout(timeout);
            const query = e.target.value;
            
            if (query.length < 2) return;
            
            timeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/receipts/api/products/suggestions?query=${encodeURIComponent(query)}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const suggestions = await response.json();
                    if (suggestions.length > 0) {
                        const productItem = input.closest('.product-item');
                        this.fillProductDetails(productItem, suggestions[0]);
                    }
                } catch (error) {
                    console.error('Błąd podczas pobierania sugestii:', error);
                    this.showNotification('error', 'Nie udało się pobrać sugestii produktów');
                }
            }, 300);
        });
    }

    fillProductDetails(productItem, suggestion) {
        const unitInput = productItem.querySelector('[name$="unit"]');
        const categorySelect = productItem.querySelector('[name$="category_id"]');
        
        if (unitInput) unitInput.value = suggestion.unit || '';
        if (categorySelect) categorySelect.value = suggestion.category_id || '0';
    }

    addProduct() {
        const template = document.getElementById('product-template');
        const productsCount = document.querySelectorAll('.product-item').length;
        
        // Klonowanie szablonu
        const newProduct = template.content.cloneNode(true);
        
        // Aktualizacja indeksów w nazwach pól
        const fields = newProduct.querySelectorAll('input, select');
        fields.forEach(field => {
            const name = field.getAttribute('name');
            if (name) {
                field.setAttribute('name', name.replace('0', productsCount.toString()));
            }
        });
        
        // Dodanie nowego produktu do kontenera
        this.productsContainer.appendChild(newProduct);
        
        // Inicjalizacja autouzupełniania
        const nameInput = this.productsContainer.lastElementChild.querySelector('.product-name');
        if (nameInput) {
            this.initializeAutocomplete(nameInput);
        }
        
        this.updateTotalAmount();
    }

    removeProduct(button) {
        const productItem = button.closest('.product-item');
        
        // Animacja usuwania
        productItem.style.opacity = '0';
        setTimeout(() => {
            productItem.remove();
            this.updateTotalAmount();
        }, 300);
    }

    updateTotalAmount() {
        const products = document.querySelectorAll('.product-item');
        let total = 0;
        
        products.forEach(product => {
            const price = parseFloat(product.querySelector('.price-input')?.value) || 0;
            const quantity = parseFloat(product.querySelector('.quantity-input')?.value) || 0;
            total += price * quantity;
        });
        
        if (this.totalInput) {
            this.totalInput.value = total.toFixed(2);
        }
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        try {
            const response = await fetch(this.form.action, {
                method: 'POST',
                body: new FormData(this.form)
            });

            const data = await response.json();
            
            if (response.ok) {
                this.showNotification('success', 'Paragon został pomyślnie zapisany');
                setTimeout(() => {
                    window.location.href = '/receipts/list';
                }, 1500);
            } else {
                this.showNotification('error', data.message || 'Wystąpił błąd podczas zapisywania paragonu');
            }
        } catch (error) {
            console.error('Błąd podczas zapisywania:', error);
            this.showNotification('error', 'Wystąpił błąd podczas zapisywania paragonu');
        }
    }

    showNotification(type, message) {
        const container = document.getElementById('notification-container');
        const notification = document.createElement('div');
        notification.className = `md-alert md-alert-${type} animate-bounce-in`;
        notification.textContent = message;
        
        container.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('animate-fade-out');
            setTimeout(() => notification.remove(), 500);
        }, 5000);
    }
}

// Inicjalizacja formularza po załadowaniu strony
document.addEventListener('DOMContentLoaded', () => {
    window.receiptForm = new ReceiptVerificationForm();
});

// Eksport funkcji dla przycisków w HTML
window.addProduct = () => window.receiptForm.addProduct();
window.removeProduct = (button) => window.receiptForm.removeProduct(button);

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\web\static\js\notifications.js
================================================================================

class NotificationSystem {
    constructor() {
        this.container = document.getElementById('notification-container');
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.id = 'notification-container';
            this.container.className = 'fixed top-20 right-6 z-50 space-y-2';
            document.body.appendChild(this.container);
        }
    }

    show(message, type = 'info', duration = 5000) {
        const notification = document.createElement('div');
        notification.className = `md-alert md-alert-${type} animate-bounce-in`;
        
        // Dodanie ikony
        const icon = this.getIconForType(type);
        
        // Utworzenie treści powiadomienia
        notification.innerHTML = `
            <div class="flex items-center space-x-2">
                ${icon}
                <span>${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-auto">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        `;

        // Dodanie do kontenera
        this.container.appendChild(notification);

        // Automatyczne usuwanie
        setTimeout(() => {
            notification.classList.add('animate-fade-out');
            setTimeout(() => notification.remove(), 500);
        }, duration);
    }

    getIconForType(type) {
        const icons = {
            success: `<svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>`,
            error: `<svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>`,
            warning: `<svg class="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>`,
            info: `<svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>`
        };
        return icons[type] || icons.info;
    }
}

// Inicjalizacja i eksport globalnej instancji
window.notifications = new NotificationSystem();
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\web\static\js\ReceiptVerificationForm.js
================================================================================

/**
 * ReceiptVerificationForm.js
 * Obsługa formularza weryfikacji paragonów
 */

class ReceiptVerificationForm {
    constructor() {
        this.form = document.getElementById('verifyForm');
        if (!this.form) {
            console.warn('Element #verifyForm nie został znaleziony w DOM.');
            return;
        }
        this.productsContainer = document.getElementById('products-container');
        this.totalInput = document.getElementById('total_amount');

        this.initializeEventListeners();
        this.initializeExistingProducts();
    }

    initializeEventListeners() {
        let debounceTimeout;
        this.form.addEventListener('input', (e) => {
            if (e.target.classList.contains('price-input') ||
                e.target.classList.contains('quantity-input')) {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(() => this.updateTotalAmount(), 300);
            }
        });

        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    initializeExistingProducts() {
        document.querySelectorAll('.product-name').forEach(input => {
            this.initializeAutocomplete(input);
        });

        this.updateTotalAmount();
    }

    async initializeAutocomplete(input) {
        let timeout = null;
        
        input.addEventListener('input', async (e) => {
            clearTimeout(timeout);
            const query = e.target.value;
            
            if (query.length < 2) return;
            
            timeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/receipts/api/products/suggestions?query=${encodeURIComponent(query)}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const suggestions = await response.json();
                    if (suggestions.length > 0) {
                        const productItem = input.closest('.product-item');
                        this.fillProductDetails(productItem, suggestions[0]);
                    }
                } catch (error) {
                    console.error('Błąd podczas pobierania sugestii:', error);
                    this.showNotification('error', 'Nie udało się pobrać sugestii produktów');
                }
            }, 300);
        });
    }

    fillProductDetails(productItem, suggestion) {
        const unitInput = productItem.querySelector('[name$="unit"]');
        const categorySelect = productItem.querySelector('[name$="category_id"]');
        
        if (unitInput) unitInput.value = suggestion.unit || '';
        if (categorySelect) categorySelect.value = suggestion.category_id || '0';
    }

    addProduct() {
        const template = document.getElementById('product-template');
        const productsCount = document.querySelectorAll('.product-item').length;
        
        const newProduct = template.content.cloneNode(true);
        
        const fields = newProduct.querySelectorAll('input, select');
        fields.forEach(field => {
            const name = field.getAttribute('name');
            if (name) {
                field.setAttribute('name', name.replace(/\d+/, productsCount.toString()));
            }
        });
        
        this.productsContainer.appendChild(newProduct);
        
        const nameInput = this.productsContainer.lastElementChild.querySelector('.product-name');
        if (nameInput) {
            this.initializeAutocomplete(nameInput);
        }
        
        this.updateTotalAmount();
    }

    removeProduct(button) {
        const productItem = button.closest('.product-item');
        
        productItem.style.opacity = '0';
        setTimeout(() => {
            productItem.remove();
            this.updateTotalAmount();
        }, 300);
    }

    updateTotalAmount() {
        const products = document.querySelectorAll('.product-item');
        let total = 0;
        
        products.forEach(product => {
            const price = parseFloat(product.querySelector('.price-input')?.value) || 0;
            const quantity = parseFloat(product.querySelector('.quantity-input')?.value) || 0;
            total += price * quantity;
        });
        
        if (this.totalInput) {
            this.totalInput.value = total.toFixed(2);
        }
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        try {
            const response = await fetch(this.form.action, {
                method: 'POST',
                body: new FormData(this.form)
            });

            const data = await response.json();
            
            if (response.ok) {
                this.showNotification('success', 'Paragon został pomyślnie zapisany');
                setTimeout(() => {
                    window.location.href = '/receipts/list';
                }, 1500);
            } else {
                this.showNotification('error', data.message || 'Wystąpił błąd podczas zapisywania paragonu');
            }
        } catch (error) {
            console.error('Błąd podczas zapisywania:', error);
            this.showNotification('error', 'Wystąpił błąd podczas zapisywania paragonu');
        }
    }

    showNotification(type, message) {
        const container = document.getElementById('notification-container');
        const notification = document.createElement('div');
        notification.className = `md-alert md-alert-${type} animate-bounce-in`;
        notification.textContent = message;

        container.appendChild(notification);

        setTimeout(() => {
            notification.classList.add('animate-fade-out');
            notification.addEventListener('animationend', () => notification.remove(), { once: true });
        }, 5000);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const formElement = document.getElementById('verifyForm');
    if (!formElement) {
        console.warn('Element #verifyForm nie istnieje. Sprawdź HTML i upewnij się, że formularz został załadowany.');
        return;
    }
    window.receiptForm = new ReceiptVerificationForm();
});

window.addProduct = () => window.receiptForm?.addProduct();
window.removeProduct = (button) => window.receiptForm?.removeProduct(button);

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\web\static\js\ReceiptVerificationForm.jsx
================================================================================

import React, { useState } from 'react';

const ReceiptVerificationForm = ({ initialData }) => {
    const [formData, setFormData] = useState({
        store: initialData.store || '',
        date: initialData.date || new Date().toISOString().split('T')[0],
        products: initialData.products.map(product => ({
            ...product,
            expiry_date: '',  // nowe pole
            notes: '',        // nowe pole
            current_quantity: product.quantity // początkowo taka sama jak quantity
        })) || [],
        total: initialData.total || 0
    });

    const handleProductChange = (index, field, value) => {
        const newProducts = [...formData.products];
        newProducts[index] = {
            ...newProducts[index],
            [field]: value
        };
        setFormData({
            ...formData,
            products: newProducts
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                window.location.href = '/receipts';
            } else {
                const error = await response.json();
                alert(`Błąd: ${error.message}`);
            }
        } catch (error) {
            alert('Wystąpił błąd podczas zapisywania danych');
        }
    };

    return (
        <div className="container mx-auto p-4">
            <form onSubmit={handleSubmit} className="space-y-6">
                <div className="bg-white shadow rounded-lg p-6">
                    <h2 className="text-xl font-bold mb-4">Weryfikacja paragonu</h2>

                    {/* Dane podstawowe */}
                    <div className="grid grid-cols-2 gap-4 mb-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Sklep</label>
                            <input
                                type="text"
                                value={formData.store}
                                onChange={(e) => setFormData({...formData, store: e.target.value})}
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                required
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Data</label>
                            <input
                                type="date"
                                value={formData.date}
                                onChange={(e) => setFormData({...formData, date: e.target.value})}
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                required
                            />
                        </div>
                    </div>

                    {/* Lista produktów */}
                    <div className="space-y-4">
                        <h3 className="text-lg font-medium">Produkty</h3>
                        {formData.products.map((product, index) => (
                            <div key={index} className="bg-gray-50 p-4 rounded-lg">
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Nazwa</label>
                                        <input
                                            type="text"
                                            value={product.name}
                                            onChange={(e) => handleProductChange(index, 'name', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Ilość</label>
                                        <input
                                            type="number"
                                            step="0.001"
                                            value={product.quantity}
                                            onChange={(e) => handleProductChange(index, 'quantity', parseFloat(e.target.value))}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Jednostka</label>
                                        <select
                                            value={product.unit}
                                            onChange={(e) => handleProductChange(index, 'unit', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        >
                                            <option value="szt">szt</option>
                                            <option value="kg">kg</option>
                                            <option value="g">g</option>
                                            <option value="l">l</option>
                                            <option value="ml">ml</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Cena</label>
                                        <input
                                            type="number"
                                            step="0.01"
                                            value={product.price}
                                            onChange={(e) => handleProductChange(index, 'price', parseFloat(e.target.value))}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700">Data ważności</label>
                                        <input
                                            type="date"
                                            value={product.expiry_date}
                                            onChange={(e) => handleProductChange(index, 'expiry_date', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                        />
                                    </div>
                                    <div className="col-span-2">
                                        <label className="block text-sm font-medium text-gray-700">Notatki</label>
                                        <textarea
                                            value={product.notes}
                                            onChange={(e) => handleProductChange(index, 'notes', e.target.value)}
                                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                            rows="2"
                                        />
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Suma */}
                    <div className="mt-6">
                        <label className="block text-sm font-medium text-gray-700">Suma</label>
                        <input
                            type="number"
                            step="0.01"
                            value={formData.total}
                            onChange={(e) => setFormData({...formData, total: parseFloat(e.target.value)})}
                            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                            required
                        />
                    </div>

                    {/* Przyciski */}
                    <div className="mt-6 flex justify-end space-x-3">
                        <button
                            type="button"
                            onClick={() => window.location.href = '/receipts'}
                            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                        >
                            Anuluj
                        </button>
                        <button
                            type="submit"
                            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                        >
                            Zapisz
                        </button>
                    </div>
                </div>
            </form>
        </div>
    );
};

export default ReceiptVerificationForm;