=== Directory: C:\Users\marci\Documents\GitHub\receipts-manager\src\database ===


================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\database\manager.py
================================================================================

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from src.config import config
from src.database.models import Base, Receipt, ReceiptItem, Category, ProductStatus
from datetime import datetime, timedelta
from typing import List, Optional


class DatabaseManager:
    def __init__(self, database_url: str = None):
        self.engine = create_engine(database_url or config.DATABASE_URL)
        self.Session = sessionmaker(bind=self.engine)

    def get_session(self):
        """Zwraca nową sesję bazy danych"""
        return self.Session()

    def get_categories(self) -> List[Category]:
        """Pobiera wszystkie kategorie"""
        with self.get_session() as session:
            return session.query(Category).all()

    def get_category_by_id(self, category_id: int) -> Optional[Category]:
        """Pobiera kategorię po ID"""
        with self.get_session() as session:
            return session.query(Category).filter(Category.id == category_id).first()

    def add_receipt(self, receipt_data: dict) -> Receipt:
        """Dodaje nowy paragon z produktami"""
        with self.get_session() as session:
            try:
                receipt = Receipt(
                    store=receipt_data['store'],
                    date=receipt_data['date'],
                    total=receipt_data['total']
                )
                session.add(receipt)
                session.flush()  # Aby otrzymać ID paragonu

                # Dodanie produktów
                for item_data in receipt_data['items']:
                    item = ReceiptItem(
                        receipt_id=receipt.id,
                        name=item_data['name'],
                        quantity=item_data['quantity'],
                        price=item_data['price'],
                        unit=item_data['unit'],
                        category_id=item_data.get('category_id'),
                        expiry_date=item_data.get('expiry_date')
                    )
                    session.add(item)

                session.commit()
                return receipt
            except Exception as e:
                session.rollback()
                raise e

    def update_product_status(self, item_id: int, new_status: ProductStatus,
                              opened_date: datetime = None) -> bool:
        """Aktualizuje status produktu"""
        with self.get_session() as session:
            try:
                item = session.query(ReceiptItem).get(item_id)
                if not item:
                    return False

                item.status = new_status
                if new_status == ProductStatus.OPENED and not item.opened_date:
                    item.opened_date = opened_date or datetime.now()

                session.commit()
                return True
            except Exception as e:
                session.rollback()
                raise e

    def get_expiring_products(self, days_threshold: int = 7) -> List[ReceiptItem]:
        """Pobiera produkty z zbliżającym się terminem ważności"""
        threshold_date = datetime.now().date() + timedelta(days=days_threshold)

        with self.get_session() as session:
            return session.query(ReceiptItem).filter(
                ReceiptItem.expiry_date <= threshold_date,
                ReceiptItem.expiry_date >= datetime.now().date(),
                ReceiptItem.status != ProductStatus.USED
            ).all()

    def get_opened_products(self) -> List[ReceiptItem]:
        """Pobiera listę otwartych produktów"""
        with self.get_session() as session:
            return session.query(ReceiptItem).filter(
                ReceiptItem.status == ProductStatus.OPENED
            ).all()

    def update_product_quantity(self, item_id: int, new_quantity: float) -> bool:
        """Aktualizuje ilość produktu"""
        with self.get_session() as session:
            try:
                item = session.query(ReceiptItem).get(item_id)
                if not item:
                    return False

                item.current_quantity = new_quantity
                if new_quantity <= 0:
                    item.status = ProductStatus.USED

                session.commit()
                return True
            except Exception as e:
                session.rollback()
                raise e
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\database\migrations.py
================================================================================

from sqlalchemy import create_engine, text
from src.config import config
from src.database.models import Base, Category, DEFAULT_CATEGORIES
from sqlalchemy.orm import sessionmaker


def init_db():
    """Inicjalizacja bazy danych"""
    engine = create_engine(config.DATABASE_URL)
    Base.metadata.create_all(engine)
    return engine


def add_default_categories(session):
    """Dodawanie domyślnych kategorii"""
    existing_categories = session.query(Category).all()
    existing_names = {category.name for category in existing_categories}

    categories_to_add = []
    for name, description in DEFAULT_CATEGORIES:
        if name not in existing_names:
            categories_to_add.append(Category(name=name, description=description))

    if categories_to_add:
        session.add_all(categories_to_add)
        session.commit()
        print(f"Dodano {len(categories_to_add)} nowych kategorii")
    else:
        print("Wszystkie kategorie już istnieją")


def add_status_column():
    """Dodanie kolumny status do tabeli receipt_items"""
    engine = create_engine(config.DATABASE_URL)

    try:
        with engine.connect() as conn:
            conn.execute(text("""
                ALTER TABLE receipt_items 
                ADD COLUMN IF NOT EXISTS status VARCHAR(20) DEFAULT 'nowy',
                ADD COLUMN IF NOT EXISTS opened_date DATE,
                ADD COLUMN IF NOT EXISTS category_id INTEGER 
                    REFERENCES categories(id) ON DELETE SET NULL
            """))
            conn.commit()
            print("Dodano nowe kolumny do tabeli receipt_items")
    except Exception as e:
        print(f"Błąd podczas dodawania kolumn: {str(e)}")


def run_migrations():
    """Uruchomienie wszystkich migracji"""
    try:
        print("Rozpoczynanie migracji bazy danych...")

        # Inicjalizacja bazy i utworzenie tabel
        engine = init_db()
        print("Utworzono/zaktualizowano strukturę bazy danych")

        # Utworzenie sesji
        Session = sessionmaker(bind=engine)
        session = Session()

        # Dodanie domyślnych kategorii
        add_default_categories(session)

        # Dodanie kolumn do istniejącej tabeli
        add_status_column()

        print("Migracja zakończona pomyślnie")

    except Exception as e:
        print(f"Wystąpił błąd podczas migracji: {str(e)}")
    finally:
        session.close()


if __name__ == "__main__":
    run_migrations()
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\database\models.py
================================================================================

from datetime import datetime
from sqlalchemy.sql import func
from src.database import db


class BaseModel(db.Model):
    """Base model class for common columns and methods."""
    __abstract__ = True

    id = db.Column(db.Integer, primary_key=True)
    created_at = db.Column(db.DateTime, default=func.now(), nullable=False)
    updated_at = db.Column(db.DateTime, default=func.now(), onupdate=func.now(), nullable=False)

    def save(self):
        """Save the model instance to database."""
        try:
            db.session.add(self)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            raise e

    def delete(self):
        """Delete the model instance from database."""
        try:
            db.session.delete(self)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            raise e


class Category(BaseModel):
    """Model representing product categories."""
    __tablename__ = 'categories'

    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.Text, nullable=True)

    # Relationships
    products = db.relationship('Product', back_populates='category', lazy='dynamic')

    def __repr__(self):
        return f"<Category {self.name}>"


class Receipt(BaseModel):
    """Model representing shopping receipts."""
    __tablename__ = 'receipts'

    purchase_date = db.Column(db.Date, nullable=False)
    store_name = db.Column(db.String(200), nullable=False)
    total_amount = db.Column(db.Numeric(10, 2), nullable=False)
    status = db.Column(db.String(20), nullable=False, default='new')  # new, processing, verified
    ocr_text = db.Column(db.Text, nullable=True)  # Raw OCR text

    # Relationships
    products = db.relationship(
        'Product',
        back_populates='receipt',
        lazy='dynamic',
        cascade='all, delete-orphan'  # Dodane kaskadowe usuwanie
    )

    def __repr__(self):
        return f"<Receipt {self.store_name} {self.purchase_date}>"


class Product(BaseModel):
    """Model representing products from receipts."""
    __tablename__ = 'products'

    name = db.Column(db.String(200), nullable=False)
    unit_price = db.Column(db.Numeric(10, 2), nullable=False)
    quantity = db.Column(db.Numeric(10, 3), nullable=False)  # Allow for fractional quantities
    unit = db.Column(db.String(20), nullable=True)  # kg, szt, l, etc.
    expiry_date = db.Column(db.Date, nullable=True)
    status = db.Column(db.String(20), nullable=False, default='active')  # active, consumed

    # Foreign keys
    receipt_id = db.Column(db.Integer, db.ForeignKey('receipts.id'), nullable=False)
    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'), nullable=True)

    # Relationships
    receipt = db.relationship('Receipt', back_populates='products')
    category = db.relationship('Category', back_populates='products')

    def __repr__(self):
        return f"<Product {self.name} {self.quantity}{self.unit}>"
================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\src\database\__init__.py
================================================================================

from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

# Inicjalizacja obiektów SQLAlchemy i Migrate
db = SQLAlchemy()
migrate = Migrate()


def init_app(app):
    """Initialize database and migrations."""
    db.init_app(app)
    migrate.init_app(app, db)

    # Import models to ensure they are registered with SQLAlchemy
    from . import models  # noqa

    # Create tables if they don't exist (development only)
    if app.config['FLASK_ENV'] == 'development':
        with app.app_context():
            db.create_all()

    return db