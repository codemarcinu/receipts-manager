=== Directory: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\pirates ===


================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\pirates\index.d.ts
================================================================================

/* (c) 2015 Ari Porad (@ariporad) <http://ariporad.com>. License: ariporad.mit-license.org */

/**
 * The hook. Accepts the code of the module and the filename.
 */
declare type Hook = (code: string, filename: string) => string;

/**
 * A matcher function, will be called with path to a file.
 *
 * Should return truthy if the file should be hooked, falsy otherwise.
 */
declare type Matcher = (path: string) => boolean;

/**
 * Reverts the hook when called.
 */
declare type RevertFunction = () => void;
interface Options {
  /**
   * The extensions to hook. Should start with '.' (ex. ['.js']).
   *
   * Takes precedence over `exts`, `extension` and `ext`.
   *
   * @alias exts
   * @alias extension
   * @alias ext
   * @default ['.js']
   */
  extensions?: ReadonlyArray<string> | string;

  /**
   * The extensions to hook. Should start with '.' (ex. ['.js']).
   *
   * Takes precedence over `extension` and `ext`.
   *
   * @alias extension
   * @alias ext
   * @default ['.js']
   */
  exts?: ReadonlyArray<string> | string;

  /**
   * The extensions to hook. Should start with '.' (ex. ['.js']).
   *
   * Takes precedence over `ext`.
   *
   * @alias ext
   * @default ['.js']
   */
  extension?: ReadonlyArray<string> | string;

  /**
   * The extensions to hook. Should start with '.' (ex. ['.js']).
   *
   * @default ['.js']
   */
  ext?: ReadonlyArray<string> | string;

  /**
   * A matcher function, will be called with path to a file.
   *
   * Should return truthy if the file should be hooked, falsy otherwise.
   */
  matcher?: Matcher | null;

  /**
   * Auto-ignore node_modules. Independent of any matcher.
   *
   * @default true
   */
  ignoreNodeModules?: boolean;
}

/**
 * Add a require hook.
 *
 * @param hook The hook. Accepts the code of the module and the filename. Required.
 * @returns The `revert` function. Reverts the hook when called.
 */
export declare function addHook(hook: Hook, opts?: Options): RevertFunction;
export {};

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\pirates\LICENSE
================================================================================

MIT License

Copyright (c) 2016-2018 Ari Porad

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\pirates\package.json
================================================================================

{
  "name": "pirates",
  "description": "Properly hijack require, i.e., properly define require hooks and customizations",
  "main": "lib/index.js",
  "types": "index.d.ts",
  "scripts": {
    "clean": "rimraf lib",
    "build": "babel src -d lib",
    "test": "cross-env BABEL_ENV=test yarn run build && nyc ava",
    "lint": "eslint --report-unused-disable-directives .",
    "prepublishOnly": "yarn run build"
  },
  "files": [
    "lib",
    "index.d.ts"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/danez/pirates.git"
  },
  "engines": {
    "node": ">= 6"
  },
  "author": {
    "name": "Ari Porad",
    "email": "ari@ariporad.com",
    "url": "http://ariporad.com"
  },
  "devDependencies": {
    "@babel/cli": "7.21.0",
    "@babel/core": "7.21.4",
    "@babel/preset-env": "7.21.4",
    "ava": "1.4.1",
    "babel-core": "7.0.0-bridge.0",
    "babel-eslint": "10.1.0",
    "babel-plugin-istanbul": "5.2.0",
    "cross-env": "5.2.1",
    "decache": "4.6.1",
    "eslint": "5.16.0",
    "eslint-config-prettier": "4.3.0",
    "eslint-plugin-import": "2.27.5",
    "eslint-plugin-prettier": "3.4.1",
    "mock-require": "3.0.3",
    "nyc": "13.3.0",
    "prettier": "1.19.1",
    "rewire": "4.0.1",
    "rimraf": "3.0.2"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/danez/pirates/issues"
  },
  "homepage": "https://github.com/danez/pirates#readme",
  "ava": {
    "files": [
      "test/*.js"
    ],
    "sources": [
      "lib/**/*.js"
    ]
  },
  "nyc": {
    "include": [
      "src/*.js"
    ],
    "reporter": [
      "json",
      "text"
    ],
    "sourceMap": false,
    "instrument": false
  },
  "version": "4.0.6"
}

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\pirates\README.md
================================================================================

# Pirates [![Coverage][codecov-badge]][codecov-link]

### Properly hijack require

[codecov-badge]: https://img.shields.io/codecov/c/github/danez/pirates/master.svg?style=flat "codecov"
[codecov-link]: https://codecov.io/gh/danez/pirates "codecov"

## Why?

Two reasons:
1. Babel and istanbul were breaking each other.
2. Everyone seemed to re-invent the wheel on this, and everyone wanted a solution that was DRY, simple, easy to use,
and made everything Just Workâ„¢, while allowing multiple require hooks, in a fashion similar to calling `super`.

For some context, see [the Babel issue thread][] which started this all, then [the nyc issue thread][], where
discussion was moved (as we began to discuss just using the code nyc had developed), and finally to [#1][issue-1]
where discussion was finally moved.

[the Babel issue thread]: https://github.com/babel/babel/pull/3062 "Babel Issue Thread"
[the nyc issue thread]: https://github.com/bcoe/nyc/issues/70 "NYC Issue Thread"
[issue-1]: https://github.com/danez/pirates/issues/1 "Issue #1"

## Installation

    npm install --save pirates

## Usage

Using pirates is really easy:
```javascript
// my-module/register.js
const addHook = require('pirates').addHook;
// Or if you use ES modules
// import { addHook } from 'pirates';

function matcher(filename) {
  // Here, you can inspect the filename to determine if it should be hooked or
  // not. Just return a truthy/falsey. Files in node_modules are automatically ignored,
  // unless otherwise specified in options (see below).

  // TODO: Implement your logic here
  return true;
}

const revert = addHook(
  (code, filename) => code.replace('@@foo', 'console.log(\'foo\');'),
  { exts: ['.js'], matcher }
);

// And later, if you want to un-hook require, you can just do:
revert();
```

## API

### pirates.addHook(hook, [opts={ [matcher: true], [exts: ['.js']], [ignoreNodeModules: true] }]);
Add a require hook. `hook` must be a function that takes `(code, filename)`, and returns the modified code. `opts` is
an optional options object. Available options are: `matcher`, which is a function that accepts a filename, and
returns a truthy value if the file should be hooked (defaults to a function that always returns true), falsey if
otherwise; `exts`, which is an array of extensions to hook, they should begin with `.` (defaults to `['.js']`);
`ignoreNodeModules`, if true, any file in a `node_modules` folder wont be hooked (the matcher also wont be called),
if false, then the matcher will be called for any files in `node_modules` (defaults to true).


## Projects that use Pirates

See the [wiki page](https://github.com/danez/pirates/wiki/Projects-using-Pirates). If you add Pirates to your project,
(And you should! It works best if everyone uses it. Then we can have a happy world full of happy require hooks!), please
add yourself to the wiki.
