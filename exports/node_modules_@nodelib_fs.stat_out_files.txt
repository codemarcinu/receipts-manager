=== Directory: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@nodelib\fs.stat\out ===


================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@nodelib\fs.stat\out\index.d.ts
================================================================================

import type { FileSystemAdapter, StatAsynchronousMethod, StatSynchronousMethod } from './adapters/fs';
import * as async from './providers/async';
import Settings, { Options } from './settings';
import type { Stats } from './types';
declare type AsyncCallback = async.AsyncCallback;
declare function stat(path: string, callback: AsyncCallback): void;
declare function stat(path: string, optionsOrSettings: Options | Settings, callback: AsyncCallback): void;
declare namespace stat {
    function __promisify__(path: string, optionsOrSettings?: Options | Settings): Promise<Stats>;
}
declare function statSync(path: string, optionsOrSettings?: Options | Settings): Stats;
export { Settings, stat, statSync, AsyncCallback, FileSystemAdapter, StatAsynchronousMethod, StatSynchronousMethod, Options, Stats };

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@nodelib\fs.stat\out\index.js
================================================================================

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.statSync = exports.stat = exports.Settings = void 0;
const async = require("./providers/async");
const sync = require("./providers/sync");
const settings_1 = require("./settings");
exports.Settings = settings_1.default;
function stat(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
        async.read(path, getSettings(), optionsOrSettingsOrCallback);
        return;
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
}
exports.stat = stat;
function statSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path, settings);
}
exports.statSync = statSync;
function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
}

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@nodelib\fs.stat\out\settings.d.ts
================================================================================

import * as fs from './adapters/fs';
export interface Options {
    followSymbolicLink?: boolean;
    fs?: Partial<fs.FileSystemAdapter>;
    markSymbolicLink?: boolean;
    throwErrorOnBrokenSymbolicLink?: boolean;
}
export default class Settings {
    private readonly _options;
    readonly followSymbolicLink: boolean;
    readonly fs: fs.FileSystemAdapter;
    readonly markSymbolicLink: boolean;
    readonly throwErrorOnBrokenSymbolicLink: boolean;
    constructor(_options?: Options);
    private _getValue;
}

================================================================================
File: C:\Users\marci\Documents\GitHub\receipts-manager\node_modules\@nodelib\fs.stat\out\settings.js
================================================================================

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("./adapters/fs");
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
    }
    _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
    }
}
exports.default = Settings;
